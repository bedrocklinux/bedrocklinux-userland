#!/bedrock/libexec/busybox sh
#
# brl tutorial brl-fetch
#
#      This program is free software; you can redistribute it and/or
#      modify it under the terms of the GNU General Public License
#      version 2 as published by the Free Software Foundation.
#
# Copyright (c) 2019-2020 Daniel Thau <danthau@bedrocklinux.org>
#
# brl-fetch tutorial

# shellcheck source=src/slash-bedrock/share/brl-tutorial/common
. /bedrock/share/brl-tutorial/common

if [ "${*}" = "help" ]; then
	echo "The brl fetch command"
	return
fi

section "${brl_fetch}" "
Welcome to the ${Bedrock_Linux} ${brl_fetch} tutorial.

${Bedrock_Linux} allows one to mix and match features from other distros.  To
leverage this said features need to be available on disk.  ${Bedrock} provides
a ${brl_fetch} command to facilitate getting files from other distros into a
${Bedrock} system.  This tutorial covers ${brl_fetch} usage.

$(standard_intro)
"

section "Listing distro options" "
To see the list of supported distros ${brl_fetch} can acquire, run it with the
$(flag -L) or $(flag --list) flag:

$(cmd "brl fetch -L")

Should these distro change something and break ${brl_fetch}'s logic to acquire
them, the associated ${Bedrock} maintainer will attempt to remedy it when time
permits.

${brl_fetch} also has code to fetch other distros which lack a ${Bedrock}
maintainer.  These worked at one point but may no longer.  To see a list of
such distros, run ${brl_fetch} with the $(flag -X) or $(flag --experimental) flag:

$(cmd "brl fetch -X")

These flags can be combined to see all possibly available distros:

$(cmd "brl fetch -LX | tee ${tmpfile}")
" "grep alpine ${tmpfile}"

section "Specifying a stratum name" "
By default, ${brl_fetch} will name the ${strata} it creates after the
corresponding distro.  This is not always desirable.  For example:

- Some may wish to have multiple ${strata} corresponding to the same distro,
such as for different releases.
- Some may prefer to name their ${strata} after the release of the distro, such
as \"buster\" for a ${Debian} 10, codenamed \"buster,\" ${stratum}.
- Some may prefer to name strata after the functionality they provide, such as
a \"xorg\" ${stratum} which provides X.org functionality

$(
	found=""
	for cur in $(brl list); do
		for avail in $(brl fetch --list); do
			if [ "${cur}" = "${avail}" ]; then
				found="${cur}"
				break
			fi
		done
		if [ -n "${found}" ]; then
			break
		fi
	done
	if [ -n "${found}" ]; then
		printf "Since you already have a(n) ${color_strat}${found}${color_norm} ${stratum},
${brl_fetch} will be unable to fetch another one without specifying a new name
and this command will fail:

	${color_alert}# brl fetch ${found}${color_norm}
"
	fi
)

Lets grab an ${Alpine} stratum and prefix \"tut-\" to the name to clarify it is
associated with this tutorial:

$(rcmd "brl fetch -n tut-alpine alpine")
" "brl list | grep \"^tut-alpine\$\""

section "Specifying release" "
If no release is specified, ${brl_fetch} will attempt to fetch the latest
stable release of a given distro.

To see potential releases for a given distro, specify the distro and the
$(flag -R) or $(flag --releases) flag:

$(cmd "brl fetch -R ubuntu")

This could be used, for example, if you wish to select between the latest
${Ubuntu} release and the latest ${Ubuntu} LTS release, or between ${Debian}
Stable, ${Debian} Testing, and ${Debian} Unstable.

To instruct ${brl_fetch} to acquire a given release of a distro, specify the
$(flag -r) or $(flag --release) flag:

$(rcmd "brl fetch -n tut-edge -r edge alpine")

We now have both latest-stable and edge releases of Alpine, which usually have
different versions:

$(cmd "cat /bedrock/strata/tut-alpine/etc/alpine-release | tee ${tmpfile}")
$(cmd "cat /bedrock/strata/tut-edge/etc/alpine-release | tee ${tmpfile2}")
" "grep [.] ${tmpfile} && grep [.] ${tmpfile2}"

alpine_mirror="$(sed 's,/edge/main,,' /bedrock/strata/tut-edge/etc/apk/repositories)"

section "Specifying mirror" "
If no mirror is specified or configured, ${brl_fetch} will attempt to determine
one automatically.  This may take some time.  Moreover, it may not always find
a valid mirror, let alone the optimal one.

If you know which package mirror you would like ${brl_fetch} to use for a given
distro, it may be configured in ${bedrock_etc_bedrock_conf}'s
${color_cmd}[brl-fetch-mirrors]${color_norm} section.  For example, if you add:

	${color_file}alpine = ${alpine_mirror}${color_norm}

future calls to ${color_cmd}brl fetch alpine${color_norm} will automatically utilize that mirror.

If you know a mirror which supports multiple distros, you can configure it as a
mirror prefix by configuring the root of the per-distro directories. For
example, if you configure:

	${color_file}mirror-prefix = http://mirrors.edge.kernel.org${color_norm}

${brl_fetch} will check ${color_link}http://mirrors.edge.kernel.org/${color_sub}<distro>${color_norm} as a possible
mirror for every distro.

One may override ${bedrock_conf}'s ${brl_fetch} mirror configuration by
providing ${brl_fetch} the $(flag --mirror) flag:

$(rcmd "brl fetch -n tut-alpine2 -m ${alpine_mirror} alpine")
" "brl list | grep \"^tut-alpine2\$\""

section "Non-native ISAs preparation" "
${Bedrock} has experimental support for ${strata} with non-native instruction
set architectures via ${color_cmd}qemu${color_norm}.  For example, it allows you to run arm binaries
on x86_64.

To provide this, it requires ${color_cmd}qemu-${color_sub}<arch>${color_cmd}-static${color_norm} executables.  Lets acquire
those now:

$(rcmd "brl fetch -n tut-debian debian")
$(rcmd "strat tut-debian apt install -y qemu-user-static")
" "brl list | grep \"^tut-debian\$\" && strat -r tut-debian /bedrock/libexec/busybox which qemu-aarch64-static && strat -r tut-debian /bedrock/libexec/busybox which qemu-x86_64-static"

if [ "$(uname -m)" = "x86_64" ]; then
	non_native_isa="aarch64"
else
	non_native_isa="x86_64"
fi

section "Non-native ISAs" "
To list architectures ${brl_fetch} supports for a given distro, query it with
$(flag -A) or $(flag --archs):

$(cmd "brl fetch -A alpine")

To list distros ${brl_fetch} supports for a given architecture, specify the
architecture with $(flag -a) or $(flag --arch) and query with
$(flag -L)/$(flag --list)/$(flag -X)/$(flag --experimental):

$(cmd "brl fetch -a aarch64 -L")

Finally, to fetch a given ISA of a given distro, use $(flag -a) to specify the ISA:

$(rcmd "brl fetch -n tut-${non_native_isa} -a ${non_native_isa} alpine")

Note executables from this new ${stratum} think they're running with another ISA:

$(cmd "strat tut-alpine uname -m | tee ${tmpfile}")
$(cmd "strat tut-${non_native_isa} uname -m | tee ${tmpfile2}")
" "grep ${non_native_isa} ${tmpfile2}"

section "Skipping post-fetch setup" "
By default, ${brl_fetch} will ${enable} and ${show} newly fetched ${strata} so
that they are immediately available for use.  If this is not always desired and
may be skipped by providing $(flag --dont-enable) and/or $(flag --dont-show) as
is appropriate.
"

section "Clean up" "
This tutorial created a number of ${strata} which you are no longer need after
the tutorial.  Clean those up to complete the tutorial:

$(rcmd brl disable tut-alpine tut-alpine2 tut-edge tut-debian tut-${non_native_isa})
$(rcmd brl remove tut-alpine tut-alpine2 tut-edge tut-debian tut-${non_native_isa})
" "! brl list -v | grep -e \"^tut-alpine$\" -e \"^tut-alpine2$\" -e \"^tut-edge$\" -e \"^tut-debian$\"  -e \"^tut-${non_native_isa}$\""
