#!/bedrock/libexec/busybox awk -f
#
# Package Manager Manager dnf support script
#
#      This program is free software; you can redistribute it and/or
#      modify it under the terms of the GNU General Public License
#      version 2 as published by the Free Software Foundation.
#
# Copyright (c) 2018-2020 Daniel Thau <danthau@bedrocklinux.org>

#
# `dnf install` does not mark an already installed implicit package as
# explicit.  Without additional action, attempts to force a package to be
# explicitly installed by `dnf install`ing it will fail.  We are this required
# to utilize `&&` for package installation.
#

system_package_managers["dnf"]
package_manager_canary_executables["dnf"] = "dnf"

#
# General, operation independent flags.
#
# Unlike operations, flags should not have implementations[].
#
user_interfaces["dnf", "assume-no"]  = "--assumeno"
user_interfaces["dnf", "assume-yes"] = "-y/--yes"
user_interfaces["dnf", "confirm"]    = ""
user_interfaces["dnf", "quiet"]      = "-q/--quiet"
user_interfaces["dnf", "verbose"]    = "-v/--verbose"

#
# Operations which directly forward the underlying command output.
#
user_interfaces["dnf", "install-packages"]         = "pmm install/in <pkgs>"
user_interfaces["dnf", "reinstall-packages"]       = "pmm reinstall/rei <pkgs>"
user_interfaces["dnf", "remove-packages-limited"]  = "pmm remove/rm/erase <pkgs>"
user_interfaces["dnf", "remove-packages-full"]     = "" # could not find a way to remove config files
user_interfaces["dnf", "verify-packages"]          = "pmm-rpm -V/--verify <pkgs>"
user_interfaces["dnf", "verify-all-packages"]      = "pmm-rpm -V/--verify -a/--all"
user_interfaces["dnf", "mark-packages-explicit"]   = "pmm mark install <pkgs>"
user_interfaces["dnf", "mark-packages-implicit"]   = "pmm mark remove <pkgs>"
user_interfaces["dnf", "show-package-information"] = "pmm info <pkgs>"
user_interfaces["dnf", "clear-cache"]              = "pmm clean all"
user_interfaces["dnf", "remove-orphans"]           = "pmm autoremove"
user_interfaces["dnf", "update-package-database"]  = "" # uses combine
user_interfaces["dnf", "update-file-database"]     = "" # uses combine
user_interfaces["dnf", "upgrade-packages-limited"] = "" # uses combine
user_interfaces["dnf", "upgrade-packages-full"]    = "" # uses combine

implementations["dnf", "install-packages"]         = "${root_user} strat -r ${stratum} dnf ${flags} install ${items} && ${root_user} strat -r ${stratum} dnf ${flags} mark install ${items}"
implementations["dnf", "reinstall-packages"]       = "${root_user} strat -r ${stratum} dnf ${flags} reinstall ${items}"
implementations["dnf", "remove-packages-limited"]  = "${root_user} strat -r ${stratum} dnf -C ${flags} remove ${items}"
implementations["dnf", "remove-packages-full"]     = "${root_user} strat -r ${stratum} dnf -C ${flags} remove ${items}"
implementations["dnf", "verify-packages"]          = "${root_user} strat -r ${stratum} rpm -V ${items}"
implementations["dnf", "verify-all-packages"]      = "${root_user} strat -r ${stratum} rpm -Va"
implementations["dnf", "mark-packages-explicit"]   = "${root_user} strat -r ${stratum} dnf -C ${flags} mark install ${items}"
implementations["dnf", "mark-packages-implicit"]   = "${root_user} strat -r ${stratum} dnf -C ${flags} mark remove ${items}"
implementations["dnf", "show-package-information"] = "strat -r ${stratum} dnf -C ${flags} info ${items}"
implementations["dnf", "clear-cache"]              = "${root_user} strat -r ${stratum} dnf -C ${flags} clean all"
implementations["dnf", "remove-orphans"]           = "${root_user} strat -r ${stratum} dnf -C ${flags} autoremove"
implementations["dnf", "update-package-database"]  = "strat -r ${stratum} dnf --refresh ${flags} check-update || true"
implementations["dnf", "update-file-database"]     = "strat -r ${stratum} dnf --refresh ${flags} check-update || true"
implementations["dnf", "upgrade-packages-limited"] = "${root_user} strat -r ${stratum} dnf ${flags} upgrade"
implementations["dnf", "upgrade-packages-full"]    = "${root_user} strat -r ${stratum} dnf ${flags} upgrade"

#
# Combine operations.
#
user_interfaces["dnf", "clear-cache,remove-orphans"]                                                             = ""
user_interfaces["dnf", "mark-packages-implicit,remove-orphans"]                                                  = ""
user_interfaces["dnf", "remove-packages-limited,remove-orphans"]                                                 = ""
user_interfaces["dnf", "remove-packages-full,remove-orphans"]                                                    = ""
user_interfaces["dnf", "update-package-database,update-file-database"]                                           = "pmm check-update"
user_interfaces["dnf", "update-package-database,upgrade-packages-partial"]                                       = ""
user_interfaces["dnf", "update-package-database,upgrade-packages-full"]                                          = ""
user_interfaces["dnf", "update-package-database,update-file-database,upgrade-packages-partial"]                  = ""
user_interfaces["dnf", "update-package-database,update-file-database,upgrade-packages-full"]                     = "pmm upgrade/update/up"
user_interfaces["dnf", "update-package-database,install-packages"]                                               = ""
user_interfaces["dnf", "update-package-database,update-file-database,install-packages"]                          = ""
user_interfaces["dnf", "upgrade-packages-limited,install-packages"]                                              = ""
user_interfaces["dnf", "upgrade-packages-full,install-packages"]                                                 = ""
user_interfaces["dnf", "update-package-database,upgrade-packages-partial,install-packages"]                      = ""
user_interfaces["dnf", "update-package-database,upgrade-packages-full,install-packages"]                         = ""
user_interfaces["dnf", "update-package-database,update-file-database,upgrade-packages-partial,install-packages"] = ""
user_interfaces["dnf", "update-package-database,update-file-database,upgrade-packages-full,install-packages"]    = ""

implementations["dnf", "clear-cache,remove-orphans"]                                                             = ""
implementations["dnf", "mark-packages-implicit,remove-orphans"]                                                  = ""
implementations["dnf", "remove-packages-limited,remove-orphans"]                                                 = ""
implementations["dnf", "remove-packages-full,remove-orphans"]                                                    = ""
implementations["dnf", "update-package-database,update-file-database"]                                           = "strat -r ${stratum} dnf --refresh ${flags} check-update || true"
implementations["dnf", "update-package-database,upgrade-packages-partial"]                                       = "${root_user} strat -r ${stratum} dnf --refresh ${flags} upgrade"
implementations["dnf", "update-package-database,upgrade-packages-full"]                                          = "${root_user} strat -r ${stratum} dnf --refresh ${flags} upgrade"
implementations["dnf", "update-package-database,update-file-database,upgrade-packages-partial"]                  = "${root_user} strat -r ${stratum} dnf --refresh ${flags} upgrade"
implementations["dnf", "update-package-database,update-file-database,upgrade-packages-full"]                     = "${root_user} strat -r ${stratum} dnf --refresh ${flags} upgrade"
implementations["dnf", "update-package-database,install-packages"]                                               = ""
implementations["dnf", "update-package-database,update-file-database,install-packages"]                          = ""
implementations["dnf", "upgrade-packages-limited,install-packages"]                                              = ""
implementations["dnf", "upgrade-packages-full,install-packages"]                                                 = ""
implementations["dnf", "update-package-database,upgrade-packages-partial,install-packages"]                      = ""
implementations["dnf", "update-package-database,upgrade-packages-full,install-packages"]                         = ""
implementations["dnf", "update-package-database,update-file-database,upgrade-packages-partial,install-packages"] = ""
implementations["dnf", "update-package-database,update-file-database,upgrade-packages-full,install-packages"]    = ""

#
# Operations which have a standardized output format.
#
user_interfaces["dnf", "list-installed-package-files"] = "pmm-rpm -q/--query -l/--list <pkg>"
user_interfaces["dnf", "list-installed-explicit"]      = "pmm history userinstalled"
user_interfaces["dnf", "list-installed-implicit"]      = ""
user_interfaces["dnf", "list-installed-packages"]      = "pmm list --installed/installed"
user_interfaces["dnf", "list-available-packages"]      = "pmm list --available/available"
user_interfaces["dnf", "search-for-package-by-name"]   = ""
user_interfaces["dnf", "search-for-package-by-all"]    = "pmm search/se <text>"
user_interfaces["dnf", "which-package-owns-file"]      = "pmm-rpm -q/--query -f/--file <file>"
user_interfaces["dnf", "which-packages-provide-file"]  = "pmm provides <file>"

implementations["dnf", "list-installed-package-files"] = "strat -r ${stratum} rpm -ql ${items}"
implementations["dnf", "list-installed-explicit"]      = "strat -r ${stratum} dnf -Cq repoquery --userinstalled | sed 's/-[^-]*-[^-]*$//'"
implementations["dnf", "list-installed-implicit"]      = "strat -r ${stratum} dnf -Cq repoquery --installed |\
	awk 'BEGIN {\
		while ((\"strat -r ${stratum} dnf -Cq repoquery --userinstalled\" | getline) > 0) {\
			sub(/-[^-]*-[^-]*$/, \"\");\
			x[$0]\
		}\
	}\
	{\
		name = $0;\
		sub(/-[^-]*-[^-]*$/, \"\", name)\
		if (!(name in x) && !(name in p)) {\
			p[name];\
			print name\
		}\n\
	}'"
implementations["dnf", "list-installed-packages"]      = "strat -r ${stratum} dnf -Cq repoquery --installed | sed 's/-[^-]*-[^-]*$//'"
implementations["dnf", "list-available-packages"]      = "strat -r ${stratum} dnf -Cq repoquery |\
	awk '{\
		sub(/-[^-]*-[^-]*$/, \"\");\
		x[$0]\
	}\
	END {\
		for (p in x) {\
			print p\
		}\
	}'"
implementations["dnf", "search-for-package-by-name"]   = "strat -r ${stratum} dnf -Cq repoquery |\
	awk -vi=${items} '{\
		sub(/-[^-]*-[^-]*$/, \"\");\
		if ($0 ~ i) {\
			x[$0]\
		}\
	}\
	END {\
		for (p in x) {\
			print p\
		}\
	}'"
implementations["dnf", "search-for-package-by-all"]    = "strat -r ${stratum} dnf -Cq search ${items} | awk '$1 ~ /[.]/ {sub(/[.][^.]+$/,\"\"); print $1}'"
implementations["dnf", "which-package-owns-file"]      = "strat -r ${stratum} rpm -qf ${items} | sed 's/-[^-]*-[^-]*$//'"
implementations["dnf", "which-packages-provide-file"]  = "strat -r ${stratum} dnf -Cq provides ${items} |\
	awk '\
		! name && /./ {\
			sub(/-[0-9].*/, \"\");\
			name = $0\
		}\
		$1 == \"Filename\" || $1 == \"Provide\" {\
			file = $3\
		}\
		/^$/ {\
			x[name\"\t\"file];\
			name = \"\"\
		}\
		END {\
			for (p in x) {\
				print p\
			}\
		}'"

#
# Internal pmm operations.
#
implementations["dnf", "is-package-installed"]               = "strat -r ${stratum} dnf -Cq info --installed ${items} >/dev/null 2>&1"
implementations["dnf", "is-package-available"]               = "strat -r ${stratum} dnf -Cq info ${items} >/dev/null 2>&1"
implementations["dnf", "is-file-db-available"]               = "true"
implementations["dnf", "print-file-db-install-instructions"] = ""
implementations["dnf", "print-package-version"]              = "strat -r ${stratum} dnf -Cq info ${items} | awk '$1 == \"Version\" {print $3}'"
implementations["dnf", "cache-package-db"]                   = "strat -r ${stratum} dnf -Cq info --available |\
	awk '\
		$1 == \"Name\" {\
			name=$3\
		}\
		$1 == \"Version\" {\
			x[name\"\t\"$3]\
		}\
		END {\
			for (p in x) {\
				print p\
			}\
		}\
	'"
