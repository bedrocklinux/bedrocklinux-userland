#!/bedrock/libexec/busybox sh
# Exherbo Linux bootstrap support created by Jacob "Kreyren" Hrbek under terms of GNUv2 (https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html) based in part on Gentoo Linux bootstrap support by Daniel Thau <danthau@bedrocklinux.org> which is also GNUv2.

# NOT PRODUCTION READY

. /bedrock/share/common-code
trap 'fetch_abort "Unexpected error occurred."' EXIT

# HELPERS
info() { printf "${color_misc}INFO: ${color_norm}${*}\n" 1>&2 ; }
warn() { printf "${color_misc}WARN: ${color_norm}${*}\n" 1>&2 ; }
die() { printf "${color_alert}FATAL: ${color_norm}${*}\n" 1>&2 ; exit 1 ; }

list_mirrors() { printf "https://dev.exherbo.org" ; }
speed_test_url() { printf "/stages/sha256sum" ; }
list_architectures() { printf "x86_64" ; }
default_release() { printf "rolling" ; }
list_releases() { printf "rolling" ; }

check_supported() {
	case "$(uname -m)" in
		"x86_64")	true ;;
		*) false ;;
	esac
}

brl_arch_to_distro() {
	case "${1}" in
		"x86_64")	printf "amd64" ;;
		*)
		die "brl does not know how to translate arch \"${1}\" to ${distro:-} format"
	esac
}

fetch() {

	# NOTES
	## bootstrap_dir="${target_dir}/brl-bootstrap"
	## target_dir="/bedrock/strata/${target_name}"

	# ABSTRACT - Get exherbo bootstrap
	##X Download tarbar to $bootstrap_dir
	##X Extract tarbar in $bootstrap_dir/target_root because brl is then moving those to ${target_dir}
	##X Extract tarbar into /tmp so that you can flex on paradigm's shitty $bootstrap_dir solution
	## LOW_PRIO: Fetch different arch based on system used
	##X Configure paludis to use stratum specific /var/tmp/paludis directory to prevent conflicts with multiple paludis-based systems used
	### Get lib variable depending on libc used
	##X Fix permission for /var/tmp/paludis
	###X If directory is present remove it's content
	## Fix permission for /etc/paludis/repositories/installed.conf to install in builddir = /var/tmp/paludis differenciated from each stratum


	file_name="exherbo-x86_64-pc-linux-musl-current.tar.xz"
	name="exherbo-musl"
	lib="musl"

	warn "--name argument is currently not supported"

	#@ Sane
	step "Downloading bootstrap software" # Download tarbar in /tmp/bedrock/${name}
		if [[ ! -e /tmp/bedrock/${name} ]]; then
			mkdir -p /tmp/bedrock/${name} && info "Created new temporary directory in /tmp/bedrock/${name} which will be used for downloads" || die "Unable to make new directory in /tmp/bedrock/${name}"
		elif [[ -e /tmp/bedrock/${name} ]]; then
			info "Directory /tmp/bedrock/${name} is already present"
		fi

		if [[ ! -e /tmp/bedrock/${name}/${file_name} ]]; then
			wget https://dev.exherbo.org/stages/${file_name} -O /tmp/bedrock/${name}/${file_name} && info "Tarbar downloaded successfully" || die "Unable to fetch tarbar"
		elif [[ -e /tmp/bedrock/${name}/${file_name} ]]; then
			info "Tarbar /tmp/bedrock/${name}/${file_name} is already downloaded"
		fi

	#@ Sane
	step "Performing checksum" # Download sha1sum and perform checksum
		if [[ ! -e /tmp/bedrock/${name}/sha1sum ]]; then
			wget "http://dev.exherbo.org/stages/sha1sum" -O "/tmp/bedrock/${name}/sha1sum" || die "Unable to fetch checksum definitions"
		elif [[ -e /tmp/bedrock/${name}/sha1sum ]]; then
			info "/tmp/bedrock/${name}/sha1sum is already downloaded"
		fi

		sha1sum /tmp/bedrock/${name}/sha1sum /tmp/bedrock/${name}/${file_name} && info "Checksum has been confirmed"|| die "Checksum failed"

	#@ Sane
	step "Preparing bootstrap software" # Export tarbar into ${target_dir}
		tar -xJpf "/tmp/bedrock/${name}/${file_name}" -C "${target_dir}" || fetch_abort "Unable to extract tarbar"

	#@ Sane, LOW_PRIO: needs more options + export from host if possible
	step "Configuring /etc/resolv.conf" # Configure resolv.conf
		printf "### GENERATED BY EXHERBO STRATUM ON BEDROCK LINUX\nnameserver1.1.1.1\nnameserver 1.0.0.1\nnameserver 2606:4700:4700::1111\nnameserver 2606:4700:4700::1001" > "${target_dir}/etc/resolv.conf" && info "file in /etc/resolv.conf has been configured" || warn "Unable to configure /etc/resolv.conf"

	#@ Sane
	step "Fixing permission for paludisbuild" # Add paludisbuild user in group that owns /dev/tty
		chroot ${target_dir} usermod -a -G $(stat -c %G /dev/tty || die "Unable to get owner of /dev/tty") paludisbuild && info "paludisbuild has been assigned in $(stat -c %G /dev/tty) group" || die "Unable to add paludisbuild in $(stat -c %G /dev/tty) group, please add manually"

	#@ Sane
	step "Configuring /etc/paludis/repositories/arbor.conf"
		if [[ $(cat ${target_dir}/etc/paludis/repositories/arbor.conf | grep builddir) != "builddir = \${root}/var/tmp/paludis-${lib}" ]]; then
			printf "builddir = \${root}/var/tmp/paludis-${lib}" >> ${target_dir}/etc/paludis/repositories/arbor.conf && info "File /etc/paludis/repositories/arbor.conf has been configured" || die "Unable to configure file /etc/paludis/repositories/arbor.conf"
		elif [[ $(cat ${target_dir}/etc/paludis/repositories/arbor.conf | grep builddir) == "builddir = \${root}/var/tmp/paludis-${lib}" ]]; then
			info "File /etc/paludis/repositories/arbor.conf is already configured"
		fi

	#@ Sane
	step "Checking if /var/tmp/paludis-${lib} is present"
		if [[ ! -e /var/tmp/paludis-${lib} ]]; then
			info "Directory /var/tmp/paludis-${lib} is not present, creating it.." && mkdir /var/tmp/paludis-${lib} || die "Unable to make directory /var/tmp/paludis-${lib}"
		elif [[ -e /var/tmp/paludis-${lib} ]]; then
			info "Directory /var/tmp/paludis-${lib} already exists, wiping it just to be sure.."
			rm -r /var/tmp/paludis-${lib}/* || die "Unable to wipe /var/tmp/paludis-${lib}"
		fi

	#@ Sane
	step "Configuring /etc/paludis/repository.template"
		if [[ $(cat ${target_dir}/etc/paludis/repository.template | grep builddir) != "builddir = \${root}/var/tmp/paludis-${lib}" ]]; then
			printf "builddir = \${root}/var/tmp/paludis-${lib}" >> ${target_dir}/etc/paludis/repository.template && info "File /etc/paludis/repository.template has been configured" || die "Unable to configure file /etc/paludis/repositories/arbor.conf"
		elif [[ $(cat ${target_dir}/etc/paludis/repository.template | grep builddir) == "builddir = \${root}/var/tmp/paludis-${lib}" ]]; then
			info "File /etc/paludis/repository.template is already configured"
		fi

	#@ Sane
	step "Configuring /etc/paludis/repositories/installed.conf"
		if [[ $(cat ${target_dir}/etc/paludis/repositories/installed.conf | grep -o "builddir = \${root}/var/tmp/paludis-${lib}/build") != "builddir = \${root}/var/tmp/paludis-${lib}/build" ]]; then
			printf "builddir = \${root}/var/tmp/paludis-${lib}/build" >> ${target_dir}/etc/paludis/repositories/installed.conf && info "File /etc/paludis/repositories/installed.conf has been configured" || die "Unable to configure file /etc/paludis/repositories/installed.conf"
		elif [[ $(cat ${target_dir}/etc/paludis/repositories/installed.conf | grep -o "builddir = \${root}/var/tmp/paludis-${lib}/build") == "builddir = \${root}/var/tmp/paludis-${lib}/build" ]]; then
			info "File /etc/paludis/repositories/installed.conf is already configured"
		fi

	#@ InSane, Needs sanizization
	step "Fixing permission for /var/tmp/paludis-${lib}"
		chroot ${target_dir} chown -R root:paludisbuild /var/tmp/paludis-${lib} || die "Unable to transfer ownership to paludisbuild on /var/tmp/paludis-${lib}"
}
