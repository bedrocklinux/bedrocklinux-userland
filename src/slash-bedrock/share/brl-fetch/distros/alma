#!/bedrock/libexec/busybox sh
#
# Alma bootstrap support
#
#      This program is free software; you can redistribute it and/or
#      modify it under the terms of the GNU General Public License
#      version 2 as published by the Free Software Foundation.
#
# Copyright (c) 2016-2025 Daniel Thau <danthau@bedrocklinux.org>
#

# shellcheck source=src/slash-bedrock/libexec/brl-fetch
. /bedrock/share/common-code
trap 'fetch_abort "Unexpected error occurred."' EXIT

check_supported() {
	false
}

get_mirror_suffix() {
	if [ "$(echo "${target_release}" | sed 's/-[a-z]*$//')" -lt 8 ]; then
		echo "${target_release}/os/${distro_arch}/"
	else
		echo "${target_release}/BaseOS/${distro_arch}/os"
	fi
}

speed_test_url() {
	echo "$(get_mirror_suffix)/repodata/repomd.xml"
}

list_mirrors() {
	mirror_list_url='https://mirrors.almalinux.org/'
	download -q "${mirror_list_url}" - |
		awk '/<table/,/<\/table/' |
		sed 's/[<>]/\n/g' |
		grep 'a href="http' |
		list_links
}

brl_arch_to_distro() {
	case "${1}" in
	"x86_64") echo "x86_64" ;;
	"aarch64") echo "aarch64" ;;
	*) abort "brl does not know how to translate arch \"${1}\" to ${distro} format" ;;
	esac
}

list_architectures() {
	cat <<EOF
aarch64
x86_64
EOF
}

default_release() {
	list_releases |
		grep -ve "[a-z-]" | # do not default stream releases, only fixed ones
		sort -n |
		tail -n1
}

list_releases() {
	# Ideally we'd use a direct alma website rather than a mirror for this, but
	# https://rsync.repo.almalinux.org/almalinux/
	# appears to have an outdated certificate at the time of writing
	for mirror in "${flag_mirror}" "https://na.edge.kernel.org/almalinux"; do
		if download -q "${mirror}" - |
			list_links |
			grep '^[0-9][0-9a-z-]*/$' |
			sed 's,/$,,'; then
			break
		fi
	done
}

bootstrap_deps() {
	echo "dnf rpm almalinux-release filesystem"
}

fetch() {
	suffix="$(get_mirror_suffix)"

	step "Downloading package information database"
	url="$(find_link "${target_mirror}/${suffix}/repodata/" "primary.xml.gz")"
	download "${url}" "${bootstrap_dir}/primary.xml.gz"

	step "Extracting package information database"
	gunzip "${bootstrap_dir}/primary.xml.gz"

	step "Converting distro package information database to brl format"
	if [ "${target_arch}" = i686 ]; then
		# CentOS arch name is i386 in mirrors but i686 in package manager
		distro_arch="i686" rpmdb_to_brldb "${bootstrap_dir}/primary.xml" "${bootstrap_dir}/brldb"
	else
		rpmdb_to_brldb "${bootstrap_dir}/primary.xml" "${bootstrap_dir}/brldb"
	fi

	# At the time of writing, the CentOS 8/8-stream primary.xml.gz
	# incorrectly indicates platform-python requires
	# /usr/libexec/platform-python rather than provides it.  Hack in a fix.
	if [ "$(echo "${target_release}" | sed 's/-[a-z]*$//')" -ge 8 ]; then
		echo "/usr/libexec/platform-python	platform-python" >>"${bootstrap_dir}/brldb/provides/u"
	fi

	step "Calculating required bootstrap packages"
	brldb_calculate_required_packages "${bootstrap_dir}/brldb" "${bootstrap_dir}/required_packages" "$(bootstrap_deps)"

	step "Downloading bootstrap packages"
	checksum_downloads "${cache}/packages/" "$(awk -v"m=${target_mirror}/${suffix}" '{print m"/"$0}' "${bootstrap_dir}/required_packages")"

	step "Extracting bootstrap packages"
	# This round is just to bootstrap the distro's rpm.
	# Next step we'll use the distro's rpm to install everything properly.
	# Need to extract filesystem first to ensure symlinks are set up
	bootstrap_packages="$(awk -v"d=${cache}/packages/" '{sub(/^.*\//,d);print $1}' "${bootstrap_dir}/required_packages")"
	# shellcheck disable=SC2086
	extract_rpms "${bootstrap_dir}" "${cache}/packages"/filesystem*.rpm ${bootstrap_packages}

	step "Installing bootstrap packages"
	setup_chroot "${bootstrap_dir}"
	# setup_ssl "${bootstrap_dir}" # fights with yum/dnf later on, not actually needed
	share_cache "packages" "${bootstrap_dir}/packages"
	bootstrap_packages="$(awk -v"d=/packages/" '{sub(/^.*\//,d);print $1}' "${bootstrap_dir}/required_packages")"
	# shellcheck disable=SC2086
	LC_ALL=C chroot "${bootstrap_dir}" sh -c 'rpm --import /etc/pki/rpm-gpg/*'
	LC_ALL=C chroot "${bootstrap_dir}" rpm -i ${bootstrap_packages}

	step "Running bootstrap software"
	# By default, dnf clears anything in its package cache.
	# Configure them to retain them so we can leverage previous cached
	# packages.
	if [ -e "${bootstrap_dir}/etc/dnf/dnf.conf" ] && grep -q "^keepcache=1$" "${bootstrap_dir}/etc/dnf/dnf.conf"; then
		share_cache "dnf-cache" "${bootstrap_dir}/target-root/var/cache/dnf"
	elif [ -e "${bootstrap_dir}/etc/dnf/dnf.conf" ] && grep -q "^keepcache=0$" "${bootstrap_dir}/etc/dnf/dnf.conf"; then
		sed 's/^keepcache=0$/keepcache=1/' "${bootstrap_dir}/etc/dnf/dnf.conf" >"${bootstrap_dir}/etc/dnf/dnf.conf-new"
		mv "${bootstrap_dir}/etc/dnf/dnf.conf-new" "${bootstrap_dir}/etc/dnf/dnf.conf"
		share_cache "dnf-cache" "${bootstrap_dir}/target-root/var/cache/dnf"
	elif [ -r "${bootstrap_dir}/etc/dnf/dnf.conf" ]; then
		echo "keepcache=1" >>"${bootstrap_dir}/etc/dnf/dnf.conf"
		share_cache "dnf-cache" "${bootstrap_dir}/target-root/var/cache/dnf"
	fi

	LC_ALL=C chroot "${bootstrap_dir}" rpm -i --root=/target-root --nodeps ./packages/centos-release-*.rpm 2>/dev/null || true
	if [ "$(echo "${target_release}" | sed 's/-[a-z]*$//')" -lt 8 ]; then
		LC_ALL=C chroot "${bootstrap_dir}" dnf --installroot=/target-root install -y rpm-build dnf
	else
		LC_ALL=C chroot "${bootstrap_dir}" dnf --installroot=/target-root --releasever="${target_release}" install -y rpm-build dnf
	fi
	# Need to set database timestamps for pmm due to `dnf -C` usage
	umount -l "${bootstrap_dir}/var/cache/dnf" >/dev/null 2>&1 || true
	setup_chroot "${target_dir}"
	LC_ALL=C chroot "${target_dir}" dnf -y update
}
