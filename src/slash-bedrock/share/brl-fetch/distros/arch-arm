#!/bedrock/libexec/busybox sh
#
# Arch Linux ARM bootstrap support
#
#      This program is free software; you can redistribute it and/or
#      modify it under the terms of the GNU General Public License
#      version 2 as published by the Free Software Foundation.
#
# Copyright (c) 2016-2019 Daniel Thau <danthau@bedrocklinux.org>
#

# shellcheck source=src/slash-bedrock/libexec/brl-fetch
. /bedrock/share/common-code
trap 'fetch_abort "Unexpected error occurred."' EXIT

check_supported() {
	true
}

speed_test_url() {
	file="$(brl_arch_to_image_name "${target_arch}")"
	echo "/os/${file}.sig"
}

list_mirrors() {
	mirror_list_url='https://archlinuxarm.org/packages/any/pacman-mirrorlist/files/mirrorlist'
	wget -O- "${mirror_list_url}" 2>/dev/null |
		awk '/\<code\>/,/<\/code>/' |
		sed 's/^# *//' |
		awk -F "[ $]" '/^Server/{print$3}'
}

brl_arch_to_distro() {
	case "${1}" in
	"aarch64") echo "aarch64" ;;
	"armv7hl") echo "arm7h" ;;
	*) abort "brl does not know how to translate arch \"${1}\" to ${distro} format.  Manually specify another architecture with the \`-a\` flag." ;;
	esac
}

brl_arch_to_image_name() {
	case "${1}" in
	"aarch64") echo "ArchLinuxARM-aarch64-latest.tar.gz" ;;
	"armv7hl") echo "ArchLinuxARM-armv7-latest.tar.gz" ;;
	*) abort "brl does not know how to translate arch \"${1}\" to ${distro} bootstrap file name.  Manually specify another architecture with the \`-a\` flag." ;;
	esac
}

# Current strategy uses pre-made image to bootstrap system.  Could not find an
# image for armv7l, and thus it is removed for the time being.  In the future
# we could refactor to actually parse the repos ourselves to build a bootstrap
# environment, which could then use the armv7l repos.
list_architectures() {
	cat <<EOF
aarch64
armv7hl
EOF
}

default_release() {
	echo "rolling"
}

list_releases() {
	echo "rolling"
}

setup_pacman() {
	LC_ALL=C chroot "${1}" /usr/bin/pacman-key --init
	LC_ALL=C chroot "${1}" /usr/bin/pacman-key --populate archlinuxarm

	if ! grep -q "^Server" "${1}/etc/pacman.d/mirrorlist"; then
		echo "### Set by Bedrock Linux when acquiring this stratum" >>"${1}/etc/pacman.d/mirrorlist"
		echo "Server = ${target_mirror}/\$repo/os/\$arch" >>"$1/etc/pacman.d/mirrorlist"
	fi
}

fetch() {
	step "Downloading bootstrap software"
	bootstrap_name="$(brl_arch_to_image_name "${target_arch}")"
	bootstrap_url="$(find_link "${target_mirror}/os/" "^${bootstrap_name}$")"
	wget -O "${bootstrap_dir}/checksum" "${bootstrap_url}.md5"
	bootstrap_checksum="$(awk '{print$1}' "${bootstrap_dir}/checksum")"
	checksum_download "${cache}/bootstrap.tar.gz" "md5sum" "${bootstrap_checksum}" "${bootstrap_url}"

	step "Preparing bootstrap software"
	tar -xv -f "${cache}/bootstrap.tar.gz" -C "${bootstrap_dir}" | awk 'NR%100==0' | progress_unknown

	step "Running bootstrap software"
	setup_chroot "${bootstrap_dir}"
	setup_pacman "${bootstrap_dir}"
	share_cache "packages" "${bootstrap_dir}/target-root/var/cache/pacman/pkg"
	LC_ALL=C chroot "${bootstrap_dir}" pacman --noconfirm -S extra/arch-install-scripts
	LC_ALL=C chroot "${bootstrap_dir}" pacstrap "/target-root" base

	step "Configuring"
	cp "${cache}/packages/"* "${target_dir}/var/cache/pacman/pkg/"
	setup_chroot "${target_dir}"
	setup_pacman "${target_dir}"
}
