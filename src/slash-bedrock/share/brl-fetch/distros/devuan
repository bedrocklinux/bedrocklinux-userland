#!/bedrock/libexec/busybox sh
#
# Devuan bootstrap support
#
#      This program is free software; you can redistribute it and/or
#      modify it under the terms of the GNU General Public License
#      version 2 as published by the Free Software Foundation.
#
# Copyright (c) 2016-2019 Daniel Thau <danthau@bedrocklinux.org>
#

# shellcheck source=src/slash-bedrock/libexec/brl-fetch
. /bedrock/share/common-code
trap 'fetch_abort "Unexpected error occurred."' EXIT

check_supported() {
	true
}

speed_test_url() {
	echo "dists/${target_release}/Release"
}

list_mirrors() {
	echo 'http://deb.devuan.org/merged'
}

brl_arch_to_distro() {
	case "${1}" in
	"aarch64") echo "arm64" ;;
	"armv7hl") echo "armhf" ;;
	"armv7l") echo "armel" ;;
	"mips") echo "mips" ;;
	"mips64el") echo "mips64el" ;;
	"mipsel") echo "mipsel" ;;
	"ppc64le") echo "ppc64el" ;;
	"s390x") echo "s390x" ;;
	"x86_64") echo "amd64" ;;
	*) abort "brl does not know how to translate arch \"${1}\" to ${distro} format" ;;
	esac
}

list_architectures() {
	cat <<EOF
aarch64
armv7hl
armv7l
mips
mips64el
mipsel
ppc64le
s390x
x86_64
EOF
}

default_release() {
	# The repo's dists/stable/Release does not reflect the current release.
	# Fall back to parsing the website.
	wget -O- 'https://devuan.org/get-devuan' 2>/dev/null |
		grep 'Devuan [0-9.]* [a-zA-Z]* (stable)' |
		sed 's/^.*Devuan [0-9.]* \([a-zA-Z]*\) (stable).*$/\1/' |
		head -n1 |
		tr '[:upper:]' '[:lower:]'

	# for mirror in "${flag_mirror}" $(list_mirrors); do
	# 	release="$(wget -O- "${mirror}/dists/stable/Release" 2>/dev/null | awk '$1 == "Codename:" {print$2;exit}')"
	# 	if [ -n "${release}" ]; then
	# 		echo "${release}"
	# 		return
	# 	fi
	# done
}

list_releases() {
	for mirror in "${flag_mirror}" $(list_mirrors); do
		if wget -O- "${mirror}/dists" 2>/dev/null |
			list_links | grep '/$' |
			grep -v -- '-' |
			grep -ve '[.]' -ve '^/' |
			sed 's,/$,,g'; then
			break
		fi
	done
}

fetch() {
	bootstrap_deps="debootstrap apt dpkg coreutils dash bash grep sed awk perl bzip2 gzip tar gpgv devuan-keyring"

	step "Downloading package information database"
	wget -O "${bootstrap_dir}/Packages.gz" "${target_mirror}/dists/${target_release}/main/binary-${distro_arch}/Packages.gz"
	gunzip "${bootstrap_dir}/Packages.gz"

	step "Converting distro package information database to brl format"
	debdb_to_brldb "${bootstrap_dir}/Packages" "${bootstrap_dir}/brldb"

	step "Calculating required bootstrap packages"
	brldb_calculate_required_packages "${bootstrap_dir}/brldb" "${bootstrap_dir}/required_packages" "${bootstrap_deps}"

	step "Downloading bootstrap packages"
	checksum_downloads "${cache}/packages/" "$(awk -v"m=${target_mirror}" '{print m"/"$0}' "${bootstrap_dir}/required_packages")"

	step "Extracting bootstrap packages"
	bootstrap_packages="$(awk -v"d=${cache}/packages/" '{sub(/^.*\//,d);print $1}' "${bootstrap_dir}/required_packages")"
	# shellcheck disable=SC2086
	extract_debs "${bootstrap_dir}" ${bootstrap_packages}

	step "Running bootstrap software"
	setup_chroot "${bootstrap_dir}"
	set +o pipefail
	if LANG=C chroot "${bootstrap_dir}" debootstrap --help | grep -q "cache-dir"; then
		share_cache "packages" "${bootstrap_dir}/packages"
		yes "" | LANG=C chroot "${bootstrap_dir}" debootstrap --variant=minbase --cache-dir="/packages" "${target_release}" "/target-root" "${target_mirror}"
	else
		yes "" | LANG=C chroot "${bootstrap_dir}" debootstrap --variant=minbase "${target_release}" "/target-root" "${target_mirror}"
	fi
	set -o pipefail

	step "Configuring"
	if [ "${target_release}" != "ceres" ] && [ "${target_release}" != "unstable" ]; then
		echo "deb http://deb.devuan.org/merged ${target_release}-security main" >>"${target_dir}/etc/apt/sources.list"
	fi
	set +o pipefail
	setup_chroot "${target_dir}"
	yes "" | LANG=C chroot "${target_dir}" /usr/bin/apt-get update
	yes "" | LANG=C chroot "${target_dir}" /usr/bin/apt-get install locales-all
	set -o pipefail
}
