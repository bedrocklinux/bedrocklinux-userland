#!/bedrock/libexec/busybox sh
#
# Alpine Linux bootstrap support
#
#      This program is free software; you can redistribute it and/or
#      modify it under the terms of the GNU General Public License
#      version 2 as published by the Free Software Foundation.
#
# Copyright (c) 2016-2019 Daniel Thau <danthau@bedrocklinux.org>
#

# shellcheck source=src/slash-bedrock/libexec/brl-fetch
. /bedrock/share/common-code
trap 'fetch_abort "Unexpected error occurred."' EXIT

check_supported() {
	true
}

speed_test_url() {
	echo "latest-stable/main/${distro_arch}/APKINDEX.tar.gz"
}

list_mirrors() {
	mirror_list_url='http://nl.alpinelinux.org/alpine/MIRRORS.txt'
	wget -O- "${mirror_list_url}" 2>/dev/null
}

brl_arch_to_distro() {
	case "${1}" in
	"aarch64") echo "aarch64" ;;
	"armv7hl") echo "armhf" ;;
	"armv7l") echo "armv7" ;;
	"ppc64le") echo "ppc64le" ;;
	"s390x") echo "s3960x" ;;
	"x86_64") echo "x86_64" ;;
	*) abort "brl does not know how to translate arch \"${1}\" to ${distro} format" ;;
	esac
}

list_architectures() {
	cat <<EOF
aarch64
armv7hl
armv7l
ppc64le
s390x
x86_64
EOF
}

default_release() {
	echo "latest-stable"
}

list_releases() {
	for mirror in "${flag_mirror}" $(list_mirrors); do
		# get list of all releases, irrelevant of architecture
		if ! release_pages="$(wget -O- "${mirror}" 2>/dev/null |
			list_links |
			grep '/$')"; then
			continue
		fi
		for page in ${release_pages}; do
			# find architectures supported by given release
			page_archs="$(wget -O- "${mirror}/${page}/main/" 2>/dev/null |
				list_links | sed -e 's,/$,,')"
			# print release if it supports architecture
			for arch in ${page_archs}; do
				if [ "${arch}" = "${distro_arch}" ]; then
					echo "${page}" | sed -e 's/^v//' -e 's,/$,,'
					break
				fi
			done
		done
		break
	done
}

fetch() {
	if echo "${target_release}" | grep -q "^[0-9.]*$"; then
		mirror_release="v${target_release}"
	else
		mirror_release="${target_release}"
	fi

	step "Downloading bootstrap software"
	# The mirror does provide a checksum in APKINDEX.tar.gz we could use to
	# verify against a cache, but it is not trivial to extract into a
	# useable format.
	url="$(find_link "${target_mirror}/${mirror_release}/main/${distro_arch}/" "^apk-tools-static.*.apk")"
	wget -O "${bootstrap_dir}/apk-tools-static.apk" "${url}"

	step "Preparing bootstrap software"
	tar xf "${bootstrap_dir}/apk-tools-static.apk" -O sbin/apk.static >"${bootstrap_dir}/apk"
	chmod a+rx "${bootstrap_dir}/apk"
	mkdir -p "${target_dir}/etc/apk/"

	step "Running bootstrap software"
	setup_chroot "${bootstrap_dir}"
	# apk does not appear to cache downloaded packages anywhere we forward
	# from a previous fetch.
	set +o pipefail
	yes "" | LC_ALL=C chroot "${bootstrap_dir}" /apk -X "${target_mirror}/${mirror_release}/main" -U --allow-untrusted --root "/target-root" --initdb add alpine-base
	set -o pipefail

	step "Configuring"
	setup_chroot "${target_dir}"
	echo "${target_mirror}/${mirror_release}/main" >"${target_dir}/etc/apk/repositories"
	LC_ALL=C chroot "${target_dir}" rc-update add devfs sysinit
	LC_ALL=C chroot "${target_dir}" rc-update add dmesg sysinit
	LC_ALL=C chroot "${target_dir}" rc-update add mdev sysinit
	LC_ALL=C chroot "${target_dir}" rc-update add networking sysinit
	LC_ALL=C chroot "${target_dir}" rc-update add hwclock boot
	LC_ALL=C chroot "${target_dir}" rc-update add modules boot
	LC_ALL=C chroot "${target_dir}" rc-update add sysctl boot
	LC_ALL=C chroot "${target_dir}" rc-update add hostname boot
	LC_ALL=C chroot "${target_dir}" rc-update add bootmisc boot
	LC_ALL=C chroot "${target_dir}" rc-update add syslog boot
	LC_ALL=C chroot "${target_dir}" rc-update add mount-ro shutdown
	LC_ALL=C chroot "${target_dir}" rc-update add killprocs shutdown
	LC_ALL=C chroot "${target_dir}" rc-update add savecache shutdown
}
