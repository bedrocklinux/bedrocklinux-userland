#
# Bedrock Linux main configuration file
#
# After making changes here, run `brl apply` (as root) to apply them.
#

[locale]
#
# The Olson timezone.  For example:
#
#     timezone = America/New_York
#
# At least one stratum should provide an Olson database file at
#
#     /usr/share/zoneinfo/<timezone>
#
# For example, for America/New_York there should be a file at
#
#     /usr/share/zoneinfo/America/New_York
#
timezone =

#
# The /etc/locale.gen language lines.  For example:
#
#     localegen = en_US.UTF-8 UTF-8
#
localegen = en_US.UTF-8 UTF-8

#
# The POSIX $LANG variable
#
LANG =

[init]
#
# Bedrock Linux provides its own init which sets up Bedrock subsystems then
# hands control over to a user-selected init provided by some stratum.
#

#
# Number of seconds to wait for an init to be input before automatically
# selecting the default value (if a valid default value is set).
#
timeout = 30

#
# Init to utilize by default if timeout expires.  Format is
#
#     default = <stratum>:<path>
#
# For example, to use void's /sbin/init, use:
#
#     default = void:/sbin/init
#
default =

#
# A comma separated list of local file paths which may provide an init.  The
# Bedrock init menu will list every available one from every (unignored)
# stratum.
#
paths = /sbin/init, /sbin/fallback-init, /sbin/myinit, /sbin/ninit, /sbin/openrc-init, /sbin/runit-init, /sbin/simpleinit, /sbin/upstart, /lib/sysvinit/init, /lib/systemd/systemd, /usr/lib/systemd/systemd, /usr/bin/intra-desktop

#
# Kernel modules to load before assuming keyboard is available.
#
modules = usbhid, hid, hid_generic

[global]
#
# Bedrock Linux categorizes every file path on the system as either:
#
# - Local to a given stratum.  Multiple instances of such files are needed to
# avoid conflicts between the strata.
# - Global across all strata.  There is only one instance of such a file
# irrelevant of the number of strata.
#
# For example: both Debian and Ubuntu have package managers that read
# /etc/apt/sources.list, and each needs to see something different there.
# Thus, the /etc/apt/sources.list file path should be local to each stratum.
# However, all processes should see the same contents in /home, and thus /home
# is global.
#
# By default, all files are local.  The following settings are used to indicate
# which files should be global.  Different contexts require different systems
# for marking a file path as global.
#

#
# A list of directories which should be global.  If something is
# mounted into one of these directories, that new mount point
# is also global.
#
share = /boot, /dev, /home, /lib/modules, /media, /mnt, /proc, /root, /run, /sys, /tmp

#
# Another list of directories which should be global.  Anything mounted in them
# is local by default.  These are primarily used to avoid recursion in nested
# cases.  Given that nesting is expected, be careful with order.
#
bind = /bedrock, /bedrock/cross, /bedrock/run, /bedrock/strata/bedrock

#
# A list of files and directories within /etc which should be global.  /etc
# must be treated specially, as the techniques used for share and bind do not
# work for files in it.
#
etc = adjtime, crypttab, default/grub, fstab, group, group+, group-, group.OLD, group.org, gshadow, gshadow+, gshadow-, gshadow.OLD, gshadow.org, hostname, hosts, login.defs, machine-id, modprobe.d/blacklist.conf, passwd, passwd+, passwd-, passwd.OLD, passwd.org, rc.local, resolv.conf, resolvconf/run, shadow, shadow+, shadow-, shadow.OLD, shadow.org, sudoers

[symlinks]
#
# Enforce various symlinks are in place at local paths.  This is applied at
# stratum enable/repair time.
#
# Keys are local paths, values are symlink contents.
#
# The symlink contents must be absolute paths.
#

#
# Some package managers attempt to update this.  They become upset if it is
# created between an unlink() and symlink(), making it unsuitable for
# [etc-symlinks] below.
#
# Different distros use slightly different values here that are all effectively
# the same.  Rather than attempt to fight distros in this regard, Bedrock has
# hard-coded internal support for multiple valid values here and may not
# respect changes to this field.
/etc/mtab = /proc/self/mounts

#
# Some distros may expect a file at one path while others expect it at another.
# Standardize the location of global files.
#
/var/lib/dbus/machine-id = /etc/machine-id
/var/run = /run

#
# Various programs need to be configured to properly interact with Bedrock
# subsystems.  Point them to Bedrock configuration.
#
/etc/systemd/system/bedrock-fix-mounts.service = /bedrock/share/systemd/bedrock-fix-mounts.service
/etc/systemd/system/bedrock-stop-fuse-filesystems.service = /bedrock/share/systemd/bedrock-stop-fuse-filesystems.service
/etc/systemd/system/multi-user.target.wants/bedrock-fix-mounts.service = /bedrock/share/systemd/bedrock-fix-mounts.service
/etc/systemd/system/multi-user.target.wants/bedrock-stop-fuse-filesystems.service = /bedrock/share/systemd/bedrock-stop-fuse-filesystems.service

/etc/X11/xorg.conf.d/99-bedrock-fonts.conf = /bedrock/run/xorg-fonts
/etc/fonts/conf.d/99-bedrock-fonts.conf = /bedrock/share/fonts/fontconf.conf

/etc/X11/Xsession.d/99bedrock_env = /bedrock/run/profile
/etc/X11/xinit/xinitrc.d/99bedrock_env = /bedrock/run/profile

/etc/bash_completion.d/brl = /bedrock/share/bash/completion/brl
/etc/bash_completion.d/strat = /bedrock/share/bash/completion/strat

/etc/fish/conf.d/99bedrock.fish = /bedrock/run/fprofile
/etc/fish/completions/brl.fish = /bedrock/share/fish/completion/brl.fish
/etc/fish/completions/strat.fish = /bedrock/share/fish/completion/strat.fish

/etc/resolvconf/update.d/00bedrock = /bedrock/share/resolvconf/00bedrock

#
# In general, system software such as Bedrock should not manipulate /usr/local.
# Bedrock should favor configuring /etc files instead.
#
# However, dbus's dbus-daemon-launch-helper seems to ignore /etc/dbus-1/
# configuration extending the search path.  See
# https://bugs.freedesktop.org/show_bug.cgi?id=92458 for a discussion on the
# matter.  For example:
#
# > Note that d-d-l-h only reads .service files from standard hard-coded paths,
# > not from any additional paths that you might have configured
#
# Since /usr/local/share/dbus is included in the hard-coded paths, is not used
# by most package managers, and is rarely used by end-users, it's the cleanest
# option available to teach dbus about /bedrock/cross.
#
/usr/local/share/dbus-1/system-services = /bedrock/cross/dbus-system
/usr/local/share/dbus-1/services = /bedrock/cross/dbus-session

#
# Some distros use a swap file and include reference to it in their fstab.
# This must be global so that it is valid when using an init from another
# stratum.  However, it is not clear if it would work well with any of the
# established techniques in [global].  Instead, symlink it into a known global
# directory.
#
/swapfile = /bedrock/swapfile

[etc-symlinks]
#
# Dynamically enforce various symlinks are in place at local paths.  Any change
# away from specified configuration is immediately undone.
#
# Keys are local paths relative to /etc, values are symlink contents.
#
# The symlink contents must be absolute paths.
#

#
# Some init systems attempt to change these values at boot time, just after
# being enabled.  Thus, symlinks-general will not suffice.
#
localtime = /bedrock/run/localtime
environment = /bedrock/run/environment

[etc-inject]
#
# Not all programs can be adequately/reliably configured by creating new,
# cleanly isolated configuration files.  Instead, a configuration file must be
# extended to include desired configuration without clobbering its stratum
# local configuration.  Typically these configuration files are in /etc.
#
# Bedrock ensures that, should certain files exist in /etc, they will include
# content specified at another file path.  If the desired content is not found
# in the file it is automatically appended to the end.
#
# The keys are file paths relative to /etc, and the values are paths to files
# whose content must be included if the key's file exists in /etc.
#
# If you alter either the key/values in this section, or the actual content of
# the values, run `brl apply` to apply the change.  Do this before rebooting
# to ensure any old content is removed.
#

sudoers = /bedrock/share/sudo/include-bedrock
profile = /bedrock/share/shells/include-bedrock

# Received mix fixed back on cross-stratum dkms.  It's disabled by default.
#
# To enable it, uncomment dkms/framework.conf line below and run `brl apply`.
#
# To re-disable it, comment out dkms/framework.conf line, `brl apply`, then
# remove corresponding line from /bedrock/strata/*/etc/dkms/framework.conf
#
#dkms/framework.conf = /bedrock/share/dkms/include-bedrock

#
# etc-inject only injects existing files and does create make files in order to
# avoid creating a file a package manager does not expect.  Different distro
# zsh packages provide different files, requiring multiple zsh file injections.
#
zprofile = /bedrock/share/zsh/include-bedrock
zshenv = /bedrock/share/zsh/include-bedrock
zsh/zprofile = /bedrock/share/zsh/include-bedrock
zsh/zshenv = /bedrock/share/zsh/include-bedrock

[env-vars]
#
# Many programs search environment variables consisting of a (usually colon
# separated) list of directories.  We can use these to teach these programs
# about cross-stratum content.
#
# These variables are typically searched in listed order.  To manage this
# order, the configuration below is broken up into three sections for each
# variable:
#
# - PREFIX:<envvar> entries.  Bedrock ensures these are at the front of the
# environment variable.  These are used to ensure a given resource is provided
# by a specific stratum.  For example, this ensures `reboot` is provided by the
# init stratum.
#
# - INFIX:<envvar> entries.  These are used to ensure a given entry comes from
# the local stratum.  For example, some software may request to be launched by
# sh via `#!/usr/bin/env sh` but utilize bash-isms which are valid on some
# distros which symlink `sh` to `bash`, but not others which don't.  Such
# software must use the local stratum's `sh` to ensure the `bash` shell they
# expect is utilized.
#
# - SUFFIX:<envvar> entries.  Bedrock ensures these are at the end of the
# environment variable.  Given the PREFIX:<envvar> (specific stratum) and
# INFIX:<envvar> (local stratum) do not contain the item, it likely does not
# matter which stratum provides it, and so this contains resources from any
# strata which provide the resource.
#

#
# A list of directories searched by various programs to find executables.
#
PREFIX:PATH = /bedrock/cross/pin/bin:/bedrock/bin
INFIX:PATH  = /usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin:/usr/local/games:/usr/games
SUFFIX:PATH = /bedrock/cross/bin

#
# A list of directories searched by the man executable to find documentation.
#
PREFIX:MANPATH = /bedrock/cross/pin/man:/bedrock/share/man
INFIX:MANPATH  = /usr/local/share/man:/usr/share/man:/bedrock/cross/man
SUFFIX:MANPATH = /bedrock/cross/man

#
# A list of directories searched by the info executable to find documentation.
#
PREFIX:INFOPATH = /bedrock/cross/pin/info:/bedrock/share/info
INFIX:INFOPATH  = /usr/local/share/info:/usr/share/info
SUFFIX:INFOPATH = /bedrock/cross/info

#
# A list of directories used by the freedesktop.org standard containing things
# such as icons and application descriptions.
#
PREFIX:XDG_DATA_DIRS = /bedrock/cross/pin
INFIX:XDG_DATA_DIRS  = /usr/local/share:/usr/share
SUFFIX:XDG_DATA_DIRS = /bedrock/cross

#
# Terminfo file locations
#
PREFIX:TERMINFO_DIRS = /bedrock/cross/pin/terminfo
INFIX:TERMINFO_DIRS  = /usr/local/share/terminfo:/usr/share/terminfo
SUFFIX:TERMINFO_DIRS = /bedrock/cross/terminfo

#
# zsh tab completion information
#
# No INFIX here; just pick up from zsh initialization.
#
PREFIX:fpath = /bedrock/share/zsh/completion
SUFFIX:fpath = /bedrock/cross/zsh-completion

[restriction]
#
# Some programs become confused upon discovering software from other distros.
# To avoid this, Bedrock can restrict such software to its own stratum (and
# global paths) by removing cross paths from various environment variables.
#
# This is primarily needed for software which discovers dependencies in
# preparation for compiling, such as Arch Linux's makepkg.  However, it may be
# useful for other programs as well.
#
# This only affects processes which are run through `strat` or /bedrock/cross.
# To ensure unwrapped calls are run through cross, configure pin entries under
# [cross-bin].
#
# List any commands you would like restricted here.
#
restrict = apt-key, cave, debuild, dpkg-buildpackage, firecfg, firejail, firetools, gdb, git, kiss, makepkg, pkgmk, prt-get, rpmbuild

[cross]
#
# Bedrock Linux mounts a virtual filesystem at
#
#     /bedrock/cross
#
# which provides an alternative view of various files from the enabled strata.
# This view is used for cross-stratum coordination.
#
# For the [cross-*] sections below, the keys represent file paths appended to
# /bedrock/cross, and the values are a list of files or directories to be
# searched for contents for the given file path.  For example,
#
#     man = /usr/local/share/man, /usr/share/man
#
# indicates that /bedrock/cross/man should be populated with the contents of
# the /usr/local/share/man and /usr/share/man directories of all of the enabled
# strata.
#
# The paths used for values may be prefixed by "<stratum>:" indicating the
# given file/directory should only be considered from a specific stratum.  For
# example,
#
#     pin/bin/firefox = arch:/usr/bin/firefox, void:/usr/bin/firefox
#
# Indicates a file at /bedrock/cross/pin/bin/firefox should be provided by
# arch if available, or if not then void; otherwise, the file should not exist.
#
# The following environment variables are also valid values:
#
#     $PATH, $MANPATH, $INFOPATH, $XDG_DATA_DIRS, $TERMINFO_DIRS, $fpath
#
# These are parsed from per-stratum /etc/profile.d and expanded appropriately.
# For example,
#
#     man = $MANPATH
#
# acts similarly to the above man example, but will detect new $MANPATH entries
# described by /etc/profile.d drop-in configuration.
#
# Environment variable entries may optionally have a "<stratum>:" prefix and/or
# a "/additional/path" suffix.  For example:
#
#    pin/bin/reboot      = init:$PATH/reboot
#
# will expand to "init:<path>/reboot" for all $PATH entries.
#

#
# If a value does not have a stratum prefixed, it may be provided by any
# stratum that has the file.  If multiple do, the values in "priority" below
# indicate which should be given priority.  Any enabled strata left unspecified
# are implicitly appended at the end in an unspecified order.  For example,
#
#     priority = gentoo, debian
#
# indicates that for the `man` example above, if gentoo provides the given man
# page, gentoo's version should be provided.  Otherwise, if debian does, then
# debian's should be provided.  Otherwise, any stratum that provides the man
# page may provide it.
#
priority =

[cross-pass]
#
# Files accessed here are passed through from the stratum's version unaltered.
#
man         = $MANPATH
info        = $INFOPATH
icons       = $XDG_DATA_DIRS/icons
pixmaps     = $XDG_DATA_DIRS/pixmaps
themes      = $XDG_DATA_DIRS/themes
backgrounds = $XDG_DATA_DIRS/backgrounds
zoneinfo    = /usr/share/zoneinfo
terminfo    = $TERMINFO_DIRS
src         = /usr/local/src, /usr/src
bash-completion = /usr/share/bash-completion
zsh-completion  = $fpath
firmware = /lib/firmware/updates/UTS_RELEASE, /lib/firmware/updates, /lib/firmware/UTS_RELEASE, /lib/firmware

[cross-bin]
#
# Files are executables.  Executing these files should implicitly redirect
# through `strat <stratum>`.
#
bin = $PATH

#
# These programs are strongly related to the init system.  If the stratum
# providing init provides these commands, that version should take priority.
# Typical Bedrock systems have /bedrock/pin/bin/ at the front of the $PATH.
#
pin/bin/systemctl   = init:$PATH/systemctl
pin/bin/rc-service  = init:$PATH/rc-service
pin/bin/rc-status   = init:$PATH/rc-status
pin/bin/rc-update   = init:$PATH/rc-update
pin/bin/rc-udevadm  = init:$PATH/rc-udevadm
pin/bin/sv          = init:$PATH/sv
pin/bin/poweroff    = init:$PATH/poweroff
pin/bin/reboot      = init:$PATH/reboot
pin/bin/shutdown    = init:$PATH/shutdown
pin/bin/halt        = init:$PATH/halt

# [restriction]/restrict items are only restricted if run through strat or
# cross.  List any such items here to ensure they are run through cross to be
# restricted.
#
# If a local instance is available, that is preferred over crossing strata
# boundaries, just in case there is some dependency on its specific quirks.
# Ensure all items here use the local alias.  If the item is not available
# locally, the call will fall through to un-pinned `bin` above.
pin/bin/apt-key           = local:$PATH/apt-key
pin/bin/cave              = local:$PATH/cave
pin/bin/debuild           = local:$PATH/debuild
pin/bin/dpkg-buildpackage = local:$PATH/dpkg-buildpackage
pin/bin/firecfg           = local:$PATH/firecfg
pin/bin/firejail          = local:$PATH/firejail
pin/bin/firetools         = local:$PATH/firetools
pin/bin/gdb               = local:$PATH/gdb
pin/bin/git               = local:$PATH/git
pin/bin/kiss              = local:$PATH/kiss
pin/bin/makepkg           = local:$PATH/makepkg
pin/bin/pkgmk             = local:$PATH/pkgmk
pin/bin/prt-get           = local:$PATH/prt-get
pin/bin/rpmbuild          = local:$PATH/rpmbuild

[cross-ini]
#
# Files are in ini format.  These files are modified so that their contents
# should work across stratum boundaries.  For example, `Exec` keys may have
# their values prefixed with `strat <stratum>` to ensure they work across
# stratum boundaries.
#
applications     = $XDG_DATA_DIRS/applications
xsessions        = init:$XDG_DATA_DIRS/xsessions, $XDG_DATA_DIRS/xsessions
wayland-sessions = init:$XDG_DATA_DIRS/wayland-sessions, $XDG_DATA_DIRS/wayland-sessions

dbus-system  = /usr/share/dbus-1/system-services
dbus-session = /usr/share/dbus-1/services

[cross-font]
#
# Values are font directories.  Fonts are passed through, and font databases
# are merged to list all fonts.
#
fonts = /usr/share/fonts

[pmm]
#
# Package Manager Manager
#
# A typical Bedrock Linux system has multiple package managers.  Bedrock's
# Package Manager Manager, or pmm, acts as a front-end for these and provides
# multi-package-manager and cross-package-manager operations.
#

#
# The command line user interface pmm should utilize.
#
# See file names in /bedrock/share/pmm/package_managers/ for available options.
#
# For example, to mimic Debian/Ubuntu/etc's apt user interface, set:
#
#     user-interface = apt
#
# Or to mimic Arch's pacman user interface, set:
#
#     user-interface = pacman
#
user-interface =

#
# List indicating the order package managers should be considered by pmm.  Any
# available package manager not included will be considered after this list in
# an undefined order.
#
# List entries may have any of the following patterns:
#
# - `<stratum>:<package-manager>`, indicating a specific stratum's specific
# package manager.
# - `<stratum>:`, indicating any/all package managers in the
# given stratum.
# - `:<package-manager>`, indicating a specific package manager from any
# stratum.
#
# For example:
#
#     priority = alpine:, debian:apt, arch:pacman, centos:, :pip
#
priority =

#
# If true, only system package managers such as `apt` or `pacman` will be
# considered by pmm.
#
# If false, non-system-package managers such as `pip` or `yay` will be
# considered as well.
#
# `priority` overrides this setting and may be used to white list specific
# non-system package managers while others remain ignored.
#
ignore-non-system-package-managers = true

#
# To black list specific strata from pmm, `brl hide --pmm <stratum>` the
# stratum.  See `brl hide --help` and `brl show --help`.
#

#
# Some package managers such as yay recommend against running as root.  If pmm
# is called as root, pmm will call such package managers with this user via
# `sudo`.
#
# sudo sets $SUDO_USER accordingly and is thus a good general default if pmm is
# called via sudo.  If you do not use this, consider setting it either your
# primary user or a dedicated unprivileged user.
#
unprivileged-user = $SUDO_USER

#
# Most package managers support only a subset of available operations.  If a
# given package manager is unable to fulfill an operation, it is skipped.
#
# If true, print a warning when skipping package manager because it does not
# support the requested operation.
#
# If false, skip package managers silently.
#
warn-about-skipping-package-managers = true

#
# pmm cache settings
#
# Many pmm operations query multiple package managers, the sum of which may be
# undesirably slow.  When run as root, pmm can cache pre-calculate and cache
# data to speed up future queries.  However, this caching operation takes time
# and its utilization risks missing cache invalidation cues.
#
# See `[miscellaneous]` `cache-life` to control how long cached values remain
# on disk.
#

#
# If true, pmm will cache the list of package managers to consider.
#
# If false, pmm will build list of available package managers every operation.
#
# This cache is updated on changes to bedrock.conf or the list of
# non-pmm-hidden, enabled strata.  It will miss the addition of new package
# managers within a preexisting stratum, such as would occur if one ran `apt
# install python-pip`.
#
# This cache size varies depending on the number of package managers available
# on the system.  It may use tens of kilobytes of disk space in total.
#
cache-package-manager-list = true

#
# If true, pmm will cache the list of available packages and some of their
# metadata.  This speeds up internal look-ups about available packages.
#
# If false, pmm will query underlying package managers every time it needs to
# learn about possible available packages.
#
# This cache is updated after pmm is instructed to update package manager
# databases (e.g. `pmm update`, `pmm -Syu`, etc).  It may become outdated if
# package managers update their databases outside of pmm.
#
# This cache size and caching time varies heavily depending on the number of
# packages a given package manager has available.  It may use tens of megabytes
# of disk space per package manager.
#
cache-package-database = true

[brl-fetch-mirrors]
#
# `brl fetch` fetches files from distros for use as Bedrock Linux strata.
#
# If a mirror is provided to the `brl fetch` command, it is used to fetch the
# given distro.  Otherwise, this configuration is checked to see if it
# specifies a given mirror should be tried.  If no working mirror is found
# here, `brl fetch` will attempt to select a mirror from those it finds for the
# given distribution.
#

#
# Some mirrors support multiple Linux distributions and use the same prefix
# path for all of them.  For example, at the time of writing,  there is an Arch
# mirror at
#
#     http://mirrors.edge.kernel.org/archlinux
#
# and a CentOS mirror at
#
#     http://mirrors.edge.kernel.org/centos
#
# and a Debian mirror at:
#
#     http://mirrors.edge.kernel.org/debian
#
# and a Fedora mirror at
#
#     http://mirrors.edge.kernel.org/fedora
#
# Rather than configuring each of these separately, the base URL can be added
# to mirror-prefix to tell `brl fetch` to check it as a possible mirror.  For
# the above kernel.org example, one may set:
#
#     mirror-prefix = http://mirrors.edge.kernel.org
#
# This is a comma separated list which is checked in order.
#
mirror-prefix =

#
# You may set mirrors per distro by setting the distro name as spelled by
#
#     brl fetch --list
#
# as the key and the mirror as the value.  For example, to indicate that Ubuntu
# should be fetched with the mirror
#
#     http://us.archive.ubuntu.com/ubuntu
#
# One may set
#
#     ubuntu = http://us.archive.ubuntu.com/ubuntu
#

[brl-update]
#
# Set mirrors to one or more Bedrock Linux releases file URLs.
#
# Most users are recommend to stick with the stable release channel here:
#
#     mirrors = https://raw.githubusercontent.com/bedrocklinux/bedrocklinux-userland/0.7/releases
#
# However, if you would like to help test upcoming Bedrock updates and are
# willing to take the associated risks, a beta channel is available as well.
# It should be added in addition to the stable channel so that you're always on
# whichever is newer between the two:
#
#     mirrors = https://raw.githubusercontent.com/bedrocklinux/bedrocklinux-userland/0.7/releases, https://raw.githubusercontent.com/bedrocklinux/bedrocklinux-userland/0.7beta/releases
#

mirrors = https://raw.githubusercontent.com/bedrocklinux/bedrocklinux-userland/0.7/releases

[miscellaneous]

#
# Time to retain Bedrock cached data (such as from brl-fetch) in days.
#
cache-life = 30

#
# Set to false to disable color in brl output
#
color = true

#
# Enable debugging for specified subsystems.
#
# Possible values include:
# - etcfs
# - brl-fetch
#
debug =
