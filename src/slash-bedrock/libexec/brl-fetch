#!/bedrock/libexec/busybox sh
#
# brl fetch
#
#      This program is free software; you can redistribute it and/or
#      modify it under the terms of the GNU General Public License
#      version 2 as published by the Free Software Foundation.
#
# Copyright (c) 2016-2019 Daniel Thau <danthau@bedrocklinux.org>
#
# Acquires files from various Linux distributions.

. /bedrock/share/common-code

print_help() {
	printf "Usage: ${color_cmd}brl fetch ${color_sub}[options] [flags] [distros]${color_norm}

Acquire files from other Linux distributions for use as new ${color_term}strata${color_norm}.  List
operations may be run as non-root, but actual fetch operation requires root.

The code to determine mirrors, releases, and architectures is prone to breaking
as upstream distros make changes.  If automated efforts to look them up fail,
try looking up the information yourself and providing it via flags.

Operations:
  ${color_sub}<none>                  ${color_term}fetch ${color_sub}[distros]
  ${color_cmd}-L${color_norm},${color_cmd} --list              ${color_norm}list distros ${color_cmd}brl fetch${color_norm} knows how to fetch
  ${color_cmd}-R${color_norm},${color_cmd} --releases          ${color_norm}list releases ${color_sub}[distros]${color_norm} provide
  ${color_cmd}-h${color_norm},${color_cmd} --help${color_norm}              print this message

Flags:
  ${color_sub}<none>                  ${color_norm}automatically select name, release, arch, and mirror
  ${color_cmd}-n${color_norm},${color_cmd} --name ${color_sub}[name]${color_norm}       ${color_norm}specify desired ${color_term}stratum${color_norm} name
  ${color_cmd}-r${color_norm},${color_cmd} --release ${color_sub}[release]${color_norm} ${color_norm}specify desired distro release
  ${color_cmd}-m${color_norm},${color_cmd} --mirror ${color_sub}[mirror]${color_norm}   ${color_norm}specify desired package repository mirror
                          (may or may not differ from ISO/installer mirror)
  ${color_cmd}-e${color_norm},${color_cmd} --dont-enable       ${color_norm}do not ${color_term}enable${color_norm} newly fetched ${color_term}strata${color_norm}
  ${color_cmd}-s${color_norm},${color_cmd} --dont-show         ${color_norm}do not ${color_term}show${color_norm} newly fetched ${color_term}strata${color_norm}

Experimental features:
  ${color_cmd}-X${color_norm},${color_cmd} --experimental      ${color_norm}list distros ${color_cmd}brl fetch${color_norm} might be able to fetch
                          ${color_norm}these are unsupported and may break
  ${color_cmd}-A${color_norm},${color_cmd} --archs             ${color_norm}list architectures for ${color_sub}[distros]${color_norm}
  ${color_cmd}-a${color_norm},${color_cmd} --arch ${color_sub}[arch]       ${color_norm}specify desired CPU architecture
                          combine with -L/-X to see distros for specified arch
                          requires ${color_cmd}qemu-${color_sub}<arch>${color_cmd}-static${color_norm} executable installed
                          non-native arch will have significant performance hit
                          do not install non-native kernel or bootloader

Examples:
  ${color_cmd}$ uname -m
  ${color_norm}x86_64
  ${color_cmd}$ brl fetch --list | head -n2
  ${color_strat}alpine
  ${color_strat}arch
  ${color_cmd}$ brl fetch --list --arch aarch64 | head -n2
  ${color_strat}alpine
  ${color_strat}arch-arm
  ${color_cmd}$ brl fetch --archs fedora | head -n2
  ${color_norm}aarch64
  ${color_norm}armhf
  ${color_cmd}$ brl fetch --releases arch
  ${color_norm}rolling
  ${color_cmd}$ brl fetch --releases debian | head -n2
  ${color_norm}buster
  ${color_norm}jessie
  ${color_rcmd}# brl fetch centos
  ${color_sub}<acquires centos with automatically selected release, mirror, arch, and name>
  ${color_rcmd}# brl fetch -r sid -m http://ftp.us.debian.org/debian/ -n sid debian
  ${color_sub}<acquires debian with specified release, mirror, and name>
  ${color_rcmd}# brl fetch -r alpine -a aarch64
  ${color_sub}<acquires aarch64 build of alpine>
  ${color_rcmd}# brl fetch alpine arch devuan
  ${color_sub}<acquires multiple distros in one command>
${color_norm}"
}

# Filters out everything from stdin except hyperlinks found in href="...".
# Intended for parsing HTTP index pages.
# Also removes various hyperlinks brl does not care about.
list_links() {
	sed 's/[<> \t\n\r]/\n/g' |
		awk -F'["'"'"']' '/^href=/ || /^HREF=/ {print$2}' |
		grep -ve '^[.][.]/\?$' -ve '^[?][A-Z]=[A-Z][;&][A-Z]=[A-Z]$'
}

# Gets the URL corresponding to a given file at a given http index
#
# First argument should be the http index URL.
# Second argument should be a regular expression to match.
#
# Example:
#     find_link "${mirror}/isos" "-latest.iso$"
#
# This is very finicky and easy to break.  This is intended to be utilized in
# well formatted HTML HTTP index pages.
#
find_link() {
	index="${1}"
	regex="${2}"

	printf "Looking for file matching: ${color_file}${regex}${color_norm}\\n" >&2
	printf "at: ${color_link}${index}${color_norm}\\n" >&2
	path="$(wget -O- "${index}" 2>/dev/null | list_links | sed 's,^.*/,,' | grep -- "${regex}" | head -n1)"
	if ! echo "${path}" | grep -q '[^[:space:]]'; then
		abort "Unable to find file.  Try manually specifying a known good mirror with \`--mirror\`."
	fi
	printf "found: ${color_file}${path}${color_norm}\\n" >&2

	if [ "${path}" != "" ]; then
		echo "${index}/${path}"
	fi
}

download_files() {
	dir="${1}"
	shift
	files="${*}"
	(
		cd "${dir}"
		IFS="
"
		for file in ${files}; do
			wget "${file}" 2>/dev/null
			echo "${file}"
		done | progress_bar "$(echo "${files}" | wc -l)"
	)
}

setup_chroot() {
	dir="${1}"

	mkdir -p "${dir}/etc"
	cp -rpL /etc/resolv.conf "${dir}/etc/resolv.conf"
	[ -e "${dir}/etc/ssl" ] || cp -rpL /etc/ssl "${dir}/etc/"
	[ -e "${dir}/etc/passwd" ] || cp -rpL /etc/passwd "${dir}/etc/"
	[ -e "${dir}/etc/group" ] || cp -rpL /etc/group "${dir}/etc/"

	mount --bind "${dir}" "${dir}"
	if [ -d "${dir}/target-root" ]; then
		mount --bind "$(dirname "${dir}")" "${dir}/target-root"
	fi

	mkdir -p "${dir}/proc"
	mount -t proc /proc "${dir}/proc"

	mkdir -p "${dir}/sys"
	mount -t sysfs /sys "${dir}/sys"

	mkdir -p "${dir}/dev"
	mount --bind /dev "${dir}/dev"
	mount --bind /dev/pts "${dir}/dev/pts"

	mkdir -p "${dir}/dev/shm/"
	mount -t tmpfs shm "${dir}/dev/shm/"
	chmod 1777 "${dir}/dev/shm/"
	mkdir -p "${dir}/run"

	mount -t tmpfs run "${dir}/run"
	chmod 1777 "${dir}/run/"
}

tear_down_chroot() {
	dir="${1}"

	cd /
	kill_chroot_procs "${dir}"
	umount_r "${dir}"
}

get_width() {
	width=$( (stty size 2>/dev/null || echo "x 40") | cut -d' ' -f2)
	if [ "${width}" -gt 80 ]; then
		width=80
	fi
}

progress_bar() {
	get_width
	awk -v"total=${1}" -v"width=${width}" '
		BEGIN {
			width -= 8
			bar = ""
			for (i = 0; i < width; i++) {
				bar = bar " "
			}
			printf "\r[%s] %3d%%", bar, NR * 100 / total
		}
		{
			bar = ""
			for (i = 0; i < width; i++) {
				if ((NR / total) >= (i / width)) {
					bar = bar "\\"
				} else {
					bar = bar " "
				}
			}
			printf "\r[%s] %3d%%", bar, NR * 100 / total
		}
		END {
			bar = ""
			for (i = 0; i < width; i++) {
				bar = bar "\\"
			}
			printf "\r[%s] 100%%\n", bar
		}
	' -
}

progress_unknown() {
	get_width
	awk -v"width=${width}" '
		BEGIN {
			width -= 8
			s[0] = "-"; s[1] = "\\"; s[2] = "|"; s[3] = "/"
			printf "\r["
			for (i = 0; i < width; i++) {
				bar = bar " "
			}
			printf "\r[%s]  ??%%", bar
		}
		{
			bar = ""
			for (i = 0; i < width; i++) {
				if (!(i % 3)) {
					bar = bar "" s[(NR + i) % 4]
				} else {
					bar = bar " "
				}
			}
			printf "\r[%s]  ??%%", bar
		}
		END {
			bar = ""
			for (i = 0; i < width; i++) {
				bar = bar "\\"
			}
			printf "\r[%s] 100%%\n", bar
		}
	' -
}

list_backends() {
	[ -z "${1:-}" ] && abort "list_backends called with insufficient arguments"
	for backend in ${backends}; do
		. "${backend}"
		if [ "${1}" = "supported" ] && ! check_supported; then
			continue
		elif [ "${1}" = "unsupported" ] && check_supported; then
			continue
		fi
		for arch in $(list_architectures); do
			if [ "${arch}" = "${target_arch}" ]; then
				basename "${backend}"
				break
			fi
		done
	done
}

pick_release() {
	# If release was specified on cmdline, use it.
	if [ -n "${flag_release:-}" ]; then
		echo "${flag_release}"
		return
	fi

	release="$(default_release)"
	if [ -z "${release:-}" ]; then
		abort "Unable to automatically find a valid release.  Manually specify release with \`--release\`."
	fi
	echo "${release}"
}

pick_mirror() {
	test_file="${1}"

	# If mirror was specified on cmdline, use it.
	if [ -n "${flag_mirror:-}" ]; then
		echo "${flag_mirror}"
		return
	fi

	mirror_file="${target_dir}/brl-fetch-mirror"

	# Some distros share mirrors.
	case "${distro}" in
	"void") key="void" ;;
	"void-musl") key="void" ;;
	*) key="${distro}" ;;
	esac

	# Map Bedrock's name for a given distro to the common mirror directory
	# name.
	case "${distro}" in
	"arch") suffix="archlinux" ;;
	"fedora") suffix="fedora/linux" ;;
	"void") suffix="voidlinux" ;;
	"void-musl") suffix="voidlinux" ;;
	*) suffix="${distro}" ;;
	esac

	notice "Checking bedrock.conf [brl-fetch-mirror] items" >&2
	rm -f "${mirror_file}"
	(
		echo "X"
		# If bedrock.conf specifies mirror, try it.  If it works, use it.
		for mirror in $(cfg_value "brl-fetch-mirrors" "${key}"); do
			echo "X"
			if wget -O- "${mirror}/${test_file}" >/dev/null 2>&1; then
				echo "${mirror}" >"${mirror_file}"
				return
			fi
		done

		# If bedrock.conf specifies mirror prefix, try it.  If it works, use it.
		for prefix in $(cfg_values "brl-fetch-mirrors" "mirror-prefix"); do
			echo "X"
			if wget -O- "${prefix}/${suffix}/${test_file}" >/dev/null 2>&1; then
				echo "${prefix}/${suffix}" >"${mirror_file}"
				return
			fi
		done
	) | progress_unknown >&2

	if [ -r "${mirror_file}" ]; then
		cat "${mirror_file}"
		rm "${mirror_file}"
		return
	fi

	# Find best mirror from list.
	mirrors="$(list_mirrors)"
	count="$(echo "${mirrors}" | wc -w)"
	if [ "${count}" -eq 1 ]; then
		echo "${mirrors}"
		return
	fi

	# Use netselect to filter the list down to top ten.  This is faster but
	# less accurate than method used for final ten.
	if [ "${count}" -gt 10 ]; then
		notice "Fast filtering ${count} to top 10" >&2
		(
			echo "X"
			(
				# shellcheck disable=SC2086
				/bedrock/libexec/netselect -s 10 -v ${mirrors} | awk '{print$2}' >"${mirror_file}"
			) 2>&1 | awk '/Running netselect to choose/ {RS="."} !(NR % 5)'
		) | progress_unknown >&2

		if [ -z "$(cat "${mirror_file}")" ]; then
			printf "Fast filter failed, falling back to slow method against all ${count} mirrors.\\n" >&2
			printf "This is known to fail within certain virtualization environments which do not support ICMP.\\n" >&2
			printf "If this seems unacceptably slow, ${color_cmd}ctrl-c${color_norm} out, ${color_cmd}brl remove${color_norm} the ${color_term}stratum${color_norm}, then look up a good mirror for the distro and ${color_cmd}brl fetch${color_norm} again, this time manually providing mirror with ${color_cmd}-m${color_norm}\\n" >&2
		else
			mirrors="$(cat "${mirror_file}")"
		fi
		rm "${mirror_file}"
	fi

	# Select mirror from remaining possibilities by trying to fetch a file
	# from each.
	count="$(echo "${mirrors}" | wc -w)"
	if [ "${count}" -eq 0 ]; then
		abort "Unable to automatically find a valid mirror.  Manually specify mirror with \`--mirror\`."
	fi
	notice "Finding fastest mirror from ${count}" >&2
	for mirror in ${mirrors}; do
		echo "mirror ${mirror}"
		time wget -O- "${mirror}/${test_file}" >/dev/null
		echo "result ${?}"
	done 2>&1 | awk -vout="${mirror_file}" '
		$1 == "mirror" {
			mirror=$NF
		}
		$1 == "real" {
			gsub(/[sm]/, "")
			time = $2 * 60 + $3
		}
		$1 == "result" {
			print "mirror="mirror" time="time" result="$2
			if ($2 != 0) {
				next
			}
			if (best_time == "" || time < best_time) {
				best_mirror=mirror
				best_time=time
			}
		}
		END {
			print best_mirror > out
		}
	' | progress_bar "${count}" >&2

	if [ -r "${mirror_file}" ] && [ -n "$(cat "${mirror_file}")" ]; then
		cat "${mirror_file}"
		rm "${mirror_file}"
		return
	else
		abort "Unable to automatically find a valid mirror.  Manually specify mirror with \`--mirror\`."
	fi
}

import_users_and_groups() {
	passwd_file="${1}"
	group_file="${2}"

	if [ -r "${group_file}" ]; then
		while read -r line; do
			group="$(echo "${line}" | awk -F: '{print$1}')"
			if ! awk -F: -v"group=${group}" '$1 == group {exit 1}' /etc/group; then
				continue
			fi

			gid="$(echo "${line}" | awk -F: '{print$3}')"
			if awk -F: -v"gid=${gid}" '$3 == gid {exit 1}' /etc/group; then
				addgroup -g "${gid}" -S "${group}"
			else
				addgroup -S "${group}"
			fi
		done <"${group_file}"
	fi

	if [ -r "${passwd_file}" ]; then
		while read -r line; do
			user="$(echo "${line}" | awk -F: '{print$1}')"
			if ! awk -F: -v"user=${user}" '$1 == user {exit 1}' /etc/passwd; then
				continue
			fi

			uid="$(echo "${line}" | awk -F: '{print$3}')"
			gid="$(echo "${line}" | awk -F: '{print$4}')"
			group="$(awk -F: -v"gid=${gid}" '$3 == gid {print$1;exit}' "${group_file}")"
			if [ -z "${group}" ]; then
				group="nogroup"
				if ! grep -q "^${group}:" /etc/group; then
					addgroup -S "nogroup"
				fi
			fi
			gecos="$(echo "${line}" | awk -F: '{print$5}')"
			home="$(echo "${line}" | awk -F: '{print$6}')"
			shell="/bedrock/cross/bin/$(basename "$(echo "${line}" | awk -F: '{print$7}')")"
			if awk -F: -v"uid=${uid}" '$3 == uid {exit 1}' /etc/passwd; then
				adduser -h "${home}" -g "${gecos}" -s "${shell}" -G "${group}" -S -D -H -u "${uid}" "${user}"
			else
				adduser -h "${home}" -g "${gecos}" -s "${shell}" -G "${group}" -S -D -H "${user}"
			fi
		done <"${passwd_file}"
	fi

	# We just imported users & groups, now let's add users to groups
	if [ -r "${group_file}" ]; then
		while read -r line; do
			if [ -z $(echo "${line}" | awk -F: '{print$4}') ]; then
				continue
			fi
			group="$(echo ${line} | awk -F: '{print$1}')"
			for user in $(echo "${line}" | cut -d: -f4- | sed 's/,/ /g'); do
				addgroup "${user}" "${group}"
			done
		done <"${group_file}"
	fi
}

# bind mount a cache entry so that possibly chrooted operations can utilize
# cache directly.
share_cache() {
	[ -n "${cache:-}" ]
	cache_entry="${cache:-}/${1}"
	cache_target="${2}"
	mkdir -p "${cache_entry}" "${cache_target}"
	mount --bind "${cache_entry}" "${cache_target}"
}

# Download a file if a file with the target checksum is not already present.
checksum_download() {
	file="${1}"
	checksum_cmd="${2}"
	checksum="${3}"
	url="${4}"

	if [ -r "${file}" ] && [ "$("${checksum_cmd}" "${file}" | awk '{print$1}')" = "${checksum}" ]; then
		notice "Using cached ${file}"
		touch "${file}"
		return
	fi

	if [ -r "${file}" ]; then
		rm -- "${file}"
	fi

	mkdir -p "$(dirname "${file}")"
	wget -O "${file}" "${url}"

	# Check download is valid
	if [ "$("${checksum_cmd}" "${file}" | awk '{print$1}')" != "${checksum}" ]; then
		abort "${url} does not have expected ${checksum_cmd} ${checksum}"
	fi
}

# Download files if they are not already present with desired checksums
checksum_downloads() {
	dir="${1}"
	shift
	lines="${*}"
	IFS="
"
	for line in ${lines}; do
		url="$(echo "${line}" | cut -d"	" -f1)"
		file="${dir}/$(echo "${url}" | sed "s,^.*/,,")"
		checksum_cmd="$(echo "${line}" | cut -d"	" -f2)"
		checksum="$(echo "${line}" | cut -d"	" -f3)"
		checksum_download "${file}" "${checksum_cmd}" "${checksum}" "${url}" >/dev/null 2>&1
		echo "X"
	done | progress_bar "$(echo "${lines}" | wc -l)"
}

extract_debs() {
	(
		cd "${1}"
		shift
		for file in "${@}"; do
			ar x "${file}"
			if [ -e "./data.tar.gz" ]; then
				gunzip "./data.tar.gz"
			elif [ -e "./data.tar.xz" ]; then
				unxz "./data.tar.xz"
			fi
			tar xf data.tar
			rm "./debian-binary"
			rm "./data.tar"
			rm "./control.tar."*
			echo "${file}"
		done | progress_bar "${#}"
	)
}

extract_rpms() {
	dir="${1}"
	shift

	cat <<EOF >"${dir}/rpm_extractor"
#!/bin/sh
# busybox rpm2cpio supports every rpm *except* lzma-compressed ones.  Try
# rpm2cpio first.  If it works, use it.  Otherwise, we know the rpm is
# (probably) lzma-compressed, in which we can use the body of the script below.
#
# Thanks to Jeff Johnson and Tim Mooney for the rpm arithmetic:
# https://www.redhat.com/archives/rpm-list/2003-June/msg00367.html
pkg=\$1
(
	if ! rpm2cpio "\$pkg"
	then
		leadsize=96
		o=\`expr \$leadsize + 8\`
		set \`od -j \$o -N 8 -t u1 \$pkg\`
		il=\`expr 256 \\* \\( 256 \\* \\( 256 \\* \$2 + \$3 \\) + \$4 \\) + \$5\`
		dl=\`expr 256 \\* \\( 256 \\* \\( 256 \\* \$6 + \$7 \\) + \$8 \\) + \$9\`

		sigsize=\`expr 8 + 16 \\* \$il + \$dl\`
		o=\`expr \$o + \$sigsize + \\( 8 - \\( \$sigsize \\% 8 \\) \\) \\% 8 + 8\`
		set \`od -j \$o -N 8 -t u1 \$pkg\`
		il=\`expr 256 \\* \\( 256 \\* \\( 256 \\* \$2 + \$3 \\) + \$4 \\) + \$5\`
		dl=\`expr 256 \\* \\( 256 \\* \\( 256 \\* \$6 + \$7 \\) + \$8 \\) + \$9\`

		hdrsize=\`expr 8 + 16 \\* \$il + \$dl\`
		o=\`expr \$o + \$hdrsize\`

		dd if="\$pkg" ibs=\$o skip=1 | lzma -d
	fi
) | cpio -id
EOF

	(
		cd "${dir}"
		for file in "${@}"; do
			sh "${dir}/rpm_extractor" "${file}" >/dev/null 2>&1
			echo "${file}"
		done | progress_bar "${#}"
	)
	rm "${dir}/rpm_extractor"
}

debdb_to_brldb() {
	mkdir -p "${2}/depends/" "${2}/provides" "${2}/paths"
	awk -F"[, ]" -v"dir=${2}" -v"total=$(wc -l <"${1}")" '
	function brldbpath(type, name) {
		if (substr(name,1,3) == "lib") {
			return dir "/" type "/" substr(name, 4, 2)
		} else {
			return dir "/" type "/" substr(name, 1, 2)
		}
	}
	$1 == "Package:" && name {
		file = brldbpath("depends", name)
		printf "%s", name >> file
		for (i in depends) {
			printf " %s", depends[i] >> file
			delete depends[i]
		}
		printf "\n" >> file
		close(file)

		file = brldbpath("provides", name)
		print name "\t" name >> file
		close(file)

		for (i in provides) {
			file = brldbpath("provides", provides[i])
			print provides[i] "\t" name >> file
			close(file)
			delete provides[i]
		}

		file = brldbpath("paths", name)
		print name "\t" urlpath "\t" checksum_cmd "\t" checksum >> file
		close(file)
		name=""
		urlpath=""
		checksum_cmd=""
		checksum=""
	}
	$1 == "Package:" {
		name = $2
	}
	$1 == "Provides:" {
		sub(/\|.*$/, "", $0)
		gsub(/\([^)]*\)/, "", $0)
		for (i=2; i<=NF; i++) {
			if ($i) {
				provides[$i] = $i
			}
		}
	}
	$1 == "Depends:" || $1 == "Pre-Depends:" {
		sub(/\|.*$/, "", $0)
		gsub(/\([^)]*\)/, "", $0)
		for (i=2; i<=NF; i++) {
			if ($i) {
				depends[$i] = $i
			}
		}
	}
	$1 == "Filename:" {
		urlpath = $2
	}
	$1 == "MD5sum:" {
		checksum_cmd = "md5sum"
		checksum = $2
	}
	$1 == "SHA256:" {
		checksum_cmd = "sha256sum"
		checksum = $2
	}
	int(NR * 100 / total) > percent {
		percent = int(NR * 100 / total)
		print "x"
	}
	' "${1}" | progress_bar 100
}

rpmdb_to_brldb() {
	mkdir -p "${2}/depends/" "${2}/provides" "${2}/paths"

	tr -d '\n' <"${1}" |
		sed -e 's,<,\n<,g' -e 's,>\(.\),>\n\1,g' |
		grep '[^ ]' >"${2}/flattened"

	awk -F"[<> ]" -v"dir=${2}" -v"total=$(wc -l <"${2}/flattened")" -v"arch=${distro_arch}" '
		function brldbpath(type, name) {
			if (substr(name,1,3) == "lib") {
				return dir "/" type "/" substr(name, 4, 2)
			} else {
				return dir "/" type "/" substr(name, 1, 2)
			}
		}
		/^<[^\/]/ {
			path = path ">" $2
		}
		/^[^ <]/ && path == ">?xml>metadata>package>name" {
			name = $0
		}
		/^[^ <]/ && path == ">?xml>metadata>package>arch" {
			pkg_arch = $0
		}
		/^[^ <]/ && path == ">?xml>metadata>package>checksum" {
			checksum = $0
		}
		path == ">?xml>metadata>package>format>rpm:requires>rpm:entry" {
			for (i=1; i <= NF; i++) {
				if (index($i, "name=\"") == 1) {
					entry = $i
					sub(/^name="/, "", entry)
					sub(/"\/?$/, "", entry)
					depends[entry] = entry
					break
				}
			}
		}
		path == ">?xml>metadata>package>format>rpm:provides>rpm:entry" {
			for (i=1; i <= NF; i++) {
				if (index($i, "name=\"") == 1) {
					entry = $i
					sub(/^name="/, "", entry)
					sub(/"\/?$/, "", entry)
					provides[entry] = entry
					break
				}
			}
		}
		/^[^ <]/ && path == ">?xml>metadata>package>format>file" {
			provides[$0] = $0
		}
		path == ">?xml>metadata>package>location" {
			for (i=1; i <= NF; i++) {
				if (index($i, "href=\"") == 1) {
					entry = $i
					sub(/^href="/, "", entry)
					sub(/"\/?$/, "", entry)
					if (entry ~ arch".rpm$" || entry ~ "noarch.rpm$") {
						urlpath = entry
					}
					break
				}
			}
		}
		path == ">?xml>metadata>package>checksum" {
			for (i=1; i <= NF; i++) {
				if (index($i, "type=\"") == 1) {
					entry = $i
					sub(/^type="/, "", entry)
					sub(/"\/?$/, "", entry)
					checksum_cmd = entry "sum"
					break
				}
			}
		}
		/\/>$/ {
			sub(">[^>]*$","",path)
		}
		/^<\// {
			if (path == ">?xml>metadata>package" && name != "" && (pkg_arch == arch || pkg_arch == "noarch")) {
				file = brldbpath("depends", name)
				printf "%s\t", name >> file
				for (i in depends) {
					printf " %s", depends[i] >> file
					delete depends[i]
				}
				printf "\n" >> file
				close(file)

				file = brldbpath("provides", name)
				print name "\t" name >> file
				close(file)

				for (i in provides) {
					file = brldbpath("provides", provides[i])
					print provides[i] "\t" name >> file
					close(file)
					delete provides[i]
				}

				file = brldbpath("paths", name)
				print name "\t" urlpath "\t" checksum_cmd "\t" checksum >> file
				close(file)

				pkg_arch=""
				name=""
				urlpath=""
				checksum_cmd=""
				checksum=""
			}
			sub(">[^>]*$","",path)
		}
		int(NR * 100 / total) > percent {
			percent = int(NR * 100 / total)
			print "x"
		}
	' "${2}/flattened" | progress_bar 100
}

brldb_calculate_required_packages() {
	awk -v"dir=${1}" -v"out=${2}" -v"packages=${3}" '
	function brldbpath(type, name) {
		if (substr(name,1,3) == "lib") {
			return dir "/" type "/" substr(name, 4, 2)
		} else {
			return dir "/" type "/" substr(name, 1, 2)
		}
	}
	function get_values(type, key, values, only_first, full_line) {
		for (value in values) {
			delete values[value]
		}
		file = brldbpath(type, key)
		while ((getline < file) > 0) {
			if ($1 == key) {
				if (only_first) {
					close(file)
					return $2
				}
				if (full_line) {
					close(file)
					sub(/^[^[:space:]]*[[:space:]]*/,"")
					return $0
				}
				for (i = 2; i <= NF; i++) {
					values[$i] = $i
				}
				break
			}
		}
		close(file)
		return
	}
	BEGIN {
		split(packages, to_process_num)
		for (i in to_process_num) {
			to_process[to_process_num[i]]
		}
		while (length(to_process) > 0) {
			for (package in to_process) {
				delete to_process[package]
				processed[package] = get_values("paths", package, "", 0, 1)
				get_values("depends", package, depends, 0, 0)
				depends[package] = package
				for (depend in depends) {
					provider = get_values("provides", depend, "", 1, 0)
					if (provider == "") {
						print "Unable to find provider for \""depend"\"" > "/dev/stderr"
						exit 1
					}
					if (!(provider in processed) && !(provider in to_process)) {
						to_process[provider]
					}
				}
				print "X"
			}
		}
		for (i in processed) {
			if (processed[i] != "") {
				print processed[i] >> out
			}
		}
		close(out)
	}
	' | progress_unknown
}

handle_help "${@:-}"
min_args "${#}" "1"

# Do not set the target directory until we have a stratum name that we know
# does not overlap with an existing stratum.  Otherwise we might accidentally
# remove an existing stratum when cleaning up.
unset target_dir

backend_dir="/bedrock/share/brl-fetch/distros/"

# Checker recommends using find here.  However, that picks up dotfiles, which
# is purposefully eschewed here.
#
# shellcheck disable=SC2012
backends="$(ls -1 "${backend_dir}/"* | sort)"

target_name=""
target_release=""
target_arch=""
target_mirror=""

flag_list=false
flag_experimental=false
flag_releases=false
flag_archs=false
flag_name=""
flag_release=""
flag_arch=""
flag_mirror=""
flag_dont_enable=false
flag_dont_show=false
distros=""

OPTL="list,experimental,releases,archs,name:,release:,arch:,mirror:,dont-enable,dont-show"
OPTO="LXRAn:r:a:m:es"
eval set -- "$(getopt -q -l "${OPTL}" -- "${OPTO}" "${@}")" || true
saw_non_positional=false

while [ -n "${1:-}" ]; do
	case "${1}" in
	-L | --list)
		flag_list=true
		shift
		;;
	-X | --experimental)
		flag_experimental=true
		shift
		;;
	-R | --releases)
		flag_releases=true
		shift
		;;
	-A | --archs)
		flag_archs=true
		shift
		;;
	-n | --name)
		flag_name="${2}"
		shift
		shift
		;;
	-r | --release)
		flag_release="${2}"
		shift
		shift
		;;
	-a | --arch)
		flag_arch="${2}"
		shift
		shift
		;;
	-m | --mirror)
		flag_mirror="${2}"
		shift
		shift
		;;
	-e | --dont-enable)
		flag_dont_enable=true
		shift
		;;
	-s | --dont-show)
		flag_dont_show=true
		shift
		;;
	--)
		shift
		;;
	-*)
		if "${saw_non_positional}"; then
			eval set -- "$(getopt -q -l "${OPTL}" -- "${OPTO}" "${@}")" || true
			saw_non_positional=false
		else
			abort "Unrecognized argument: ${1}"
		fi
		;;
	*)
		saw_non_positional=true
		distros="${distros} ${1}"
		shift
		;;
	esac
done

system_arch="$(get_system_arch)"

if [ -n "${flag_arch}" ]; then
	target_arch="$(standardize_architecture "${flag_arch}")"
	if [ -z "${target_arch}" ]; then
		abort "Unrecognized/unsupported CPU architecture specified."
	fi
else
	target_arch="${system_arch}"
fi

if "${flag_list}" && "${flag_experimental}"; then
	list_backends "all"
elif "${flag_list}"; then
	list_backends "supported"
elif "${flag_experimental}"; then
	list_backends "unsupported"
fi

if [ -z "${distros}" ] && "${flag_releases}"; then
	abort "list-releases operation requires distros to be specified"
elif [ -z "${distros}" ] && "${flag_archs}"; then
	abort "list-archs operation requires distros to be specified"
fi

for distro in ${distros}; do
	backend="${backend_dir}/${distro}"
	if ! [ -r "${backend}" ]; then
		abort "Could not find supporting code for \`${distro}\`."
	fi
	. "${backend}"
	unset target_dir
	unset bootstrap_dir
	unset cache

	if "${flag_archs}"; then
		list_architectures
	fi

	if "${flag_releases}"; then
		distro_arch="$(brl_arch_to_distro "${target_arch}")"
		list_releases
	fi

	# If no operation flag has been specified, fetch.  If any has not, do not fetch.
	if "${flag_list}" || "${flag_experimental}" || "${flag_releases}" || "${flag_archs}"; then
		continue
	fi

	if check_arch_supported_natively "${target_arch}"; then
		unset qemu_bin
		unset qemu_path
	else
		qemu_bin="$(qemu_binary_for_arch "${target_arch}")"
		if ! qemu_strat="$(brl which "${qemu_bin}")"; then
			abort "Could not find \`${qemu_bin}\`.  Install it to fetch ${target_arch} strata.  It is often provided by a \"qemu-user-static\" package."
		fi
		qemu_local_path="$(strat -r "${qemu_strat}" /bedrock/libexec/busybox which "${qemu_bin}")"
		qemu_path="/bedrock/strata/${qemu_strat}/${qemu_local_path}"
		if [ "$(stat -c "%u" "${qemu_path}")" != 0 ]; then
			abort "Interpreter at ${qemu_path} is not owned by root.  Ensure a locked down \"${qemu-bin}\" is earlier in the \$PATH and try again."
		fi
		if [ "$(stat -c "%g" "${qemu_path}")" != "0" ]; then
			abort "Interpreter at ${qemu_path} has a non-root group.  Ensure a locked down \"${qemu-bin}\" is earlier in the \$PATH and try again."
		fi
		if stat -c "%A" "${qemu_path}" | grep -q "^.....w...."; then
			abort "Interpreter at ${qemu_path} is open to writing by group.  Ensure a locked down \"${qemu-bin}\" is earlier in the \$PATH and try again."
		fi
		if stat -c "%A" "${qemu_path}" | grep -q "^........w."; then
			abort "Interpreter at ${qemu_path} is open to writing by other users.  Ensure a locked down \"${qemu-bin}\" is earlier in the \$PATH and try again."
		fi
		notice "${color_warn}Non-native CPU architecture functionality is experimental.  The fetch operation and resulting files may or may not work.${color_norm}"
	fi

	if ! check_supported; then
		notice "${color_warn}Fetch code for specified distro is experimental.  The fetch operation and resulting files may or may not work.${color_norm}"
	fi

	if [ -n "${flag_name}" ]; then
		target_name="${flag_name}"
	elif [ -n "${flag_arch}" ]; then
		target_name="${distro}-${flag_arch}"
	else
		target_name="${distro}"
	fi

	lock
	if is_stratum_or_alias "${target_name}"; then
		abort "Something already exists at \"/bedrock/strata/${target_name}\".  Consider either setting a different name with \`brl fetch -n <new-name> <other fields>\` or removing the pre-existing stratum/alias with \`brl remove \"${target_name}\"\`."
	fi
	trap 'fetch_abort "Unexpected error occurred."' EXIT
	target_dir="/bedrock/strata/${target_name}"
	mkdir -p "${target_dir}"
	drop_lock

	steps="$(grep -c "^[[:space:]]*step\>" "${backend}")"
	steps="$((steps + 9))"
	if ! "${flag_dont_show}"; then
		steps=$((steps + 1))
	fi
	if ! "${flag_dont_enable}"; then
		steps=$((steps + 1))
	fi
	step_init "${steps}"

	step "Determining name"
	notice "Using ${color_strat}${target_name}${color_norm}"

	step "Determining CPU architecture"
	distro_arch="$(brl_arch_to_distro "${target_arch}")"
	set_attr "${target_dir}" "arch" "${target_arch}"
	setup_binfmt_misc "${target_name}"
	notice "Using ${color_file}${target_arch}${color_norm}"

	step "Determining release"
	if [ -n "${flag_release}" ]; then
		target_release="${flag_release}"
	else
		target_release="$(pick_release)"
	fi
	notice "Using ${color_file}${target_release}${color_norm}"

	step "Determining mirror"
	if [ -n "${flag_mirror}" ]; then
		target_mirror="${flag_mirror}"
	else
		target_mirror="$(pick_mirror "$(speed_test_url)")"
	fi
	if [ "${distro}" = "arch" ] || [ "${distro}" = "arch-arm" ]; then
		# arch mirrors are typically formatted including $variables.
		# Strip those - we'll populate them and append ourselves.
		if echo "${target_mirror}" | grep -q "[$]"; then
			target_mirror="$(echo "${target_mirror}" | sed 's/[$].*//g')"
		fi
		# Some users call brl-fetch without escaping/quoting the
		# aforementioned variables.  Since they are not populated shell
		# variables, they end up being empty strings.  Detect this and
		# handle it as well.
		if echo "${target_mirror}" | grep -q '//os//\?$'; then
			target_mirror="$(echo "${target_mirror}" | sed 's,//os//\?$,,g')"
		fi
	fi

	notice "Using ${color_link}${target_mirror}${color_norm}"

	step "Making bootstrap directory structure"
	bootstrap_dir="${target_dir}/brl-bootstrap"
	if [ -z "${qemu_path:-}" ]; then
		mkdir -p "${target_dir}" "${bootstrap_dir}/target-root"
	else
		mkdir -p "${target_dir}/usr/bin/" "${bootstrap_dir}/usr/bin/" "${bootstrap_dir}/target-root"
		cp "${qemu_path}" "${target_dir}/usr/bin/${qemu_bin}"
		cp "${qemu_path}" "${bootstrap_dir}/usr/bin/${qemu_bin}"
		chown root:root "${target_dir}/usr/bin/${qemu_bin}"
		chown root:root "${bootstrap_dir}/usr/bin/${qemu_bin}"
		chmod 755 "${target_dir}/usr/bin/${qemu_bin}"
		chown 755 "${bootstrap_dir}/usr/bin/${qemu_bin}"
	fi

	cache="/bedrock/var/cache/brl-fetch-${distro}-${target_release}-${target_arch}"
	lock "${cache}"

	# backends rely on these variables.
	if [ -z "${target_dir:-}" ] ||
		[ -z "${bootstrap_dir:-}" ] ||
		[ -z "${target_mirror:-}" ] ||
		[ -z "${target_release:-}" ] ||
		[ -z "${target_arch:-}" ] ||
		[ -z "${distro_arch:-}" ] ||
		[ -z "${cache:-}" ]; then
		fetch_abort "Essential variable not set"
	fi
	fetch

	step "Setting locale"
	localegen="$(cfg_values "locale" "localegen")"
	if [ -n "${localegen:-}" ] && [ -e "${target_dir}/etc/locale.gen" ]; then
		if ! [ -d "${target_dir}/proc/self" ]; then
			setup_chroot "${target_dir}"
		fi
		echo "### Added by Bedrock Linux when acquiring this stratum" >>"${target_dir}/etc/locale.gen"
		echo "${localegen}" >>"${target_dir}/etc/locale.gen"
		LC_ALL=C chroot "${target_dir}" locale-gen
	fi

	step "Cleaning up"
	drop_lock "${cache}"
	tear_down_chroot "${target_dir}"
	less_lethal_rm_rf "${bootstrap_dir}"
	clear_old_cache

	step "Importing users and groups"
	import_users_and_groups "${target_dir}/etc/passwd" "${target_dir}/etc/group"

	step "Preparing symlinks"
	enforce_symlinks --force "${target_name}"

	if ! "${flag_dont_show}"; then
		step "${color_term}Showing${color_norm}"
		/bedrock/libexec/brl-show "${target_name}"
	fi

	if ! "${flag_dont_enable}"; then
		step "${color_term}Enabling${color_norm}"
		/bedrock/libexec/brl-enable "${target_name}"
	fi

	notice "Successfully ${color_term}fetched${color_norm} a new ${distro} ${color_term}stratum${color_norm} with name ${color_strat}${target_name}${color_norm}"
done

exit_success
